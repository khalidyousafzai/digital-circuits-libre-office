%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Wed Jul 11 16:24:25 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/decoder3-8.sch
%%Author: (null)
%%BoundingBox: 0 0 806 446
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-67000 -40300 translate
gsave
69300 45100 69600 44600 10 line
69600 44600 69900 45100 10 line
69300 45100 69600 45100 10 line
69600 45100 69900 45100 10 line
69600 44550 50 0 360 10 darc
69600 45100 69600 45400 10 line
69600 44300 69600 44500 10 line
grestore
gsave
68200 45100 68500 44600 10 line
68500 44600 68800 45100 10 line
68200 45100 68500 45100 10 line
68500 45100 68800 45100 10 line
68500 44550 50 0 360 10 darc
68500 45100 68500 45400 10 line
68500 44300 68500 44500 10 line
grestore
68500 46000 68500 45400 10 line
gsave
false false false true 260.000000 [(a1) ] 0 68300 46300 180.555557 text
grestore
69600 46000 69600 45400 10 line
gsave
false false false true 260.000000 [(a0) ] 0 69400 46300 180.555557 text
grestore
73600 40700 73600 41000 10 line
gsave
false false false true 260.000000 [(d3) ] 0 73300 40600 180.555557 text
grestore
74800 40700 74800 41000 10 line
gsave
false false false true 260.000000 [(d2) ] 0 74500 40600 180.555557 text
grestore
76000 40700 76000 41000 10 line
gsave
false false false true 260.000000 [(d1) ] 0 75700 40600 180.555557 text
grestore
77200 40700 77200 41000 10 line
gsave
false false false true 260.000000 [(d0) ] 0 76900 40600 180.555557 text
grestore
gsave
67300 45100 67600 44600 10 line
67600 44600 67900 45100 10 line
67300 45100 67600 45100 10 line
67600 45100 67900 45100 10 line
67600 44550 50 0 360 10 darc
67600 45100 67600 45400 10 line
67600 44300 67600 44500 10 line
grestore
67600 45400 67600 46000 10 line
gsave
false false false true 260.000000 [(a2) ] 0 67400 46300 180.555557 text
grestore
67600 44300 67600 43300 10 line
78000 43300 67600 43300 10 line
68500 44300 68500 43800 10 line
78000 43800 68500 43800 10 line
78000 44300 69600 44300 10 line
67600 45700 67200 45700 10 line
67200 45700 67200 43100 10 line
78000 43100 67200 43100 10 line
68500 45700 68100 45700 10 line
68100 45700 68100 43600 10 line
78000 43600 68100 43600 10 line
69600 45700 69200 45700 10 line
69200 42300 69200 45700 10 line
78000 44100 69200 44100 10 line
68800 40700 68800 41000 10 line
gsave
false false false true 260.000000 [(d7) ] 0 68500 40600 180.555557 text
grestore
70000 40700 70000 41000 10 line
gsave
false false false true 260.000000 [(d6) ] 0 69700 40600 180.555557 text
grestore
71200 40700 71200 41000 10 line
gsave
false false false true 260.000000 [(d5) ] 0 70900 40600 180.555557 text
grestore
72400 40700 72400 41000 10 line
gsave
false false false true 260.000000 [(d4) ] 0 72100 40600 180.555557 text
grestore
gsave
70800 42300 70800 42000 10 line
71200 42300 71200 42000 10 line
71600 42300 71600 42000 10 line
71200 41300 71200 41000 10 line
71500 42000 70900 42000 10 line
70900 42000 70900 41600 10 line
71500 42000 71500 41600 10 line
71200 41600 300 -180 0 10 darc
71500 42000 71700 42000 10 line
70700 42000 70900 42000 10 line
grestore
gsave
72000 42300 72000 42000 10 line
72400 42300 72400 42000 10 line
72800 42300 72800 42000 10 line
72400 41300 72400 41000 10 line
72700 42000 72100 42000 10 line
72100 42000 72100 41600 10 line
72700 42000 72700 41600 10 line
72400 41600 300 -180 0 10 darc
72700 42000 72900 42000 10 line
71900 42000 72100 42000 10 line
grestore
gsave
73200 42300 73200 42000 10 line
73600 42300 73600 42000 10 line
74000 42300 74000 42000 10 line
73600 41300 73600 41000 10 line
73900 42000 73300 42000 10 line
73300 42000 73300 41600 10 line
73900 42000 73900 41600 10 line
73600 41600 300 -180 0 10 darc
73900 42000 74100 42000 10 line
73100 42000 73300 42000 10 line
grestore
gsave
74400 42300 74400 42000 10 line
74800 42300 74800 42000 10 line
75200 42300 75200 42000 10 line
74800 41300 74800 41000 10 line
75100 42000 74500 42000 10 line
74500 42000 74500 41600 10 line
75100 42000 75100 41600 10 line
74800 41600 300 -180 0 10 darc
75100 42000 75300 42000 10 line
74300 42000 74500 42000 10 line
grestore
gsave
75600 42300 75600 42000 10 line
76000 42300 76000 42000 10 line
76400 42300 76400 42000 10 line
76000 41300 76000 41000 10 line
76300 42000 75700 42000 10 line
75700 42000 75700 41600 10 line
76300 42000 76300 41600 10 line
76000 41600 300 -180 0 10 darc
76300 42000 76500 42000 10 line
75500 42000 75700 42000 10 line
grestore
gsave
76800 42300 76800 42000 10 line
77200 42300 77200 42000 10 line
77600 42300 77600 42000 10 line
77200 41300 77200 41000 10 line
77500 42000 76900 42000 10 line
76900 42000 76900 41600 10 line
77500 42000 77500 41600 10 line
77200 41600 300 -180 0 10 darc
77500 42000 77700 42000 10 line
76700 42000 76900 42000 10 line
grestore
gsave
69600 42300 69600 42000 10 line
70000 42300 70000 42000 10 line
70400 42300 70400 42000 10 line
70000 41300 70000 41000 10 line
70300 42000 69700 42000 10 line
69700 42000 69700 41600 10 line
70300 42000 70300 41600 10 line
70000 41600 300 -180 0 10 darc
70300 42000 70500 42000 10 line
69500 42000 69700 42000 10 line
grestore
gsave
68400 42300 68400 42000 10 line
68800 42300 68800 42000 10 line
69200 42300 69200 42000 10 line
68800 41300 68800 41000 10 line
69100 42000 68500 42000 10 line
68500 42000 68500 41600 10 line
69100 42000 69100 41600 10 line
68800 41600 300 -180 0 10 darc
69100 42000 69300 42000 10 line
68300 42000 68500 42000 10 line
grestore
68800 42300 68800 43600 10 line
68400 42300 68400 43100 10 line
70400 42300 70400 44300 10 line
70000 42300 70000 43600 10 line
69600 42300 69600 43100 10 line
70800 42300 70800 43100 10 line
71200 42300 71200 43800 10 line
71600 42300 71600 44100 10 line
72000 42300 72000 43100 10 line
72400 42300 72400 43800 10 line
72800 42300 72800 44300 10 line
73200 42300 73200 43300 10 line
73600 42300 73600 43600 10 line
74000 42300 74000 44100 10 line
74400 42300 74400 43300 10 line
74800 43600 74800 42300 10 line
75200 42300 75200 44300 10 line
75600 42300 75600 43300 10 line
76000 42300 76000 43800 10 line
76400 42300 76400 44100 10 line
76800 42300 76800 43300 10 line
77200 42300 77200 43800 10 line
77600 42300 77600 44300 10 line
67000 40300 78200 40300 10 line
78200 40300 78200 46500 10 line
78200 46500 67000 46500 10 line
67000 46500 67000 40300 10 line
60 60 68470 45970 fbox
newpath
68500 45700
25
0 360 arc
fill
60 60 69570 45970 fbox
newpath
69600 45700
25
0 360 arc
fill
60 60 73570 40670 fbox
60 60 74770 40670 fbox
60 60 75970 40670 fbox
60 60 77170 40670 fbox
60 60 67570 45970 fbox
newpath
67600 45700
25
0 360 arc
fill
60 60 77970 43270 fbox
newpath
73200 43300
25
0 360 arc
fill
newpath
74400 43300
25
0 360 arc
fill
newpath
75600 43300
25
0 360 arc
fill
newpath
76800 43300
25
0 360 arc
fill
60 60 77970 43770 fbox
newpath
71200 43800
25
0 360 arc
fill
newpath
72400 43800
25
0 360 arc
fill
newpath
76000 43800
25
0 360 arc
fill
newpath
77200 43800
25
0 360 arc
fill
60 60 77970 44270 fbox
newpath
70400 44300
25
0 360 arc
fill
newpath
72800 44300
25
0 360 arc
fill
newpath
75200 44300
25
0 360 arc
fill
newpath
77600 44300
25
0 360 arc
fill
newpath
67600 45700
25
0 360 arc
fill
newpath
67600 45700
25
0 360 arc
fill
60 60 77970 43070 fbox
newpath
68400 43100
25
0 360 arc
fill
newpath
69600 43100
25
0 360 arc
fill
newpath
70800 43100
25
0 360 arc
fill
newpath
72000 43100
25
0 360 arc
fill
newpath
68500 45700
25
0 360 arc
fill
newpath
68500 45700
25
0 360 arc
fill
60 60 77970 43570 fbox
newpath
68800 43600
25
0 360 arc
fill
newpath
70000 43600
25
0 360 arc
fill
newpath
73600 43600
25
0 360 arc
fill
newpath
74800 43600
25
0 360 arc
fill
newpath
69600 45700
25
0 360 arc
fill
newpath
69600 45700
25
0 360 arc
fill
newpath
69200 44100
25
0 360 arc
fill
60 60 77970 44070 fbox
newpath
69200 44100
25
0 360 arc
fill
newpath
71600 44100
25
0 360 arc
fill
newpath
74000 44100
25
0 360 arc
fill
newpath
76400 44100
25
0 360 arc
fill
newpath
69200 44100
25
0 360 arc
fill
60 60 68770 40670 fbox
60 60 69970 40670 fbox
60 60 71170 40670 fbox
60 60 72370 40670 fbox
newpath
68800 43600
25
0 360 arc
fill
newpath
68800 43600
25
0 360 arc
fill
newpath
68400 43100
25
0 360 arc
fill
newpath
68400 43100
25
0 360 arc
fill
newpath
70400 44300
25
0 360 arc
fill
newpath
70400 44300
25
0 360 arc
fill
newpath
70000 43600
25
0 360 arc
fill
newpath
70000 43600
25
0 360 arc
fill
newpath
69600 43100
25
0 360 arc
fill
newpath
69600 43100
25
0 360 arc
fill
newpath
70800 43100
25
0 360 arc
fill
newpath
70800 43100
25
0 360 arc
fill
newpath
71200 43800
25
0 360 arc
fill
newpath
71200 43800
25
0 360 arc
fill
newpath
71600 44100
25
0 360 arc
fill
newpath
71600 44100
25
0 360 arc
fill
newpath
72000 43100
25
0 360 arc
fill
newpath
72000 43100
25
0 360 arc
fill
newpath
72400 43800
25
0 360 arc
fill
newpath
72400 43800
25
0 360 arc
fill
newpath
72800 44300
25
0 360 arc
fill
newpath
72800 44300
25
0 360 arc
fill
newpath
73200 43300
25
0 360 arc
fill
newpath
73200 43300
25
0 360 arc
fill
newpath
73600 43600
25
0 360 arc
fill
newpath
73600 43600
25
0 360 arc
fill
newpath
74000 44100
25
0 360 arc
fill
newpath
74000 44100
25
0 360 arc
fill
newpath
74400 43300
25
0 360 arc
fill
newpath
74400 43300
25
0 360 arc
fill
newpath
74800 43600
25
0 360 arc
fill
newpath
74800 43600
25
0 360 arc
fill
newpath
75200 44300
25
0 360 arc
fill
newpath
75200 44300
25
0 360 arc
fill
newpath
75600 43300
25
0 360 arc
fill
newpath
75600 43300
25
0 360 arc
fill
newpath
76000 43800
25
0 360 arc
fill
newpath
76000 43800
25
0 360 arc
fill
newpath
76400 44100
25
0 360 arc
fill
newpath
76400 44100
25
0 360 arc
fill
newpath
76800 43300
25
0 360 arc
fill
newpath
76800 43300
25
0 360 arc
fill
newpath
77200 43800
25
0 360 arc
fill
newpath
77200 43800
25
0 360 arc
fill
newpath
77600 44300
25
0 360 arc
fill
newpath
77600 44300
25
0 360 arc
fill
showpage
%%End
