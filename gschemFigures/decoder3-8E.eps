%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Thu Jul 12 09:59:20 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/decoder3-8E.sch
%%Author: (null)
%%BoundingBox: 0 0 943 446
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-66300 -40200 translate
gsave
69200 45100 69500 44600 10 line
69500 44600 69800 45100 10 line
69200 45100 69500 45100 10 line
69500 45100 69800 45100 10 line
69500 44550 50 0 360 10 darc
69500 45100 69500 45400 10 line
69500 44300 69500 44500 10 line
grestore
gsave
68000 45100 68300 44600 10 line
68300 44600 68600 45100 10 line
68000 45100 68300 45100 10 line
68300 45100 68600 45100 10 line
68300 44550 50 0 360 10 darc
68300 45100 68300 45400 10 line
68300 44300 68300 44500 10 line
grestore
68300 46000 68300 45400 10 line
gsave
false false false true 260.000000 [(a1) ] 0 68100 46300 180.555557 text
grestore
69500 46000 69500 45400 10 line
gsave
false false false true 260.000000 [(a0) ] 0 69300 46300 180.555557 text
grestore
74200 40700 74200 41000 10 line
gsave
false false false true 260.000000 [(d3) ] 0 73900 40600 180.555557 text
grestore
75600 40700 75600 41000 10 line
gsave
false false false true 260.000000 [(d2) ] 0 75300 40600 180.555557 text
grestore
77000 40700 77000 41000 10 line
gsave
false false false true 260.000000 [(d1) ] 0 76700 40600 180.555557 text
grestore
78400 40700 78400 41000 10 line
gsave
false false false true 260.000000 [(d0) ] 0 78100 40600 180.555557 text
grestore
gsave
67100 45100 67400 44600 10 line
67400 44600 67700 45100 10 line
67100 45100 67400 45100 10 line
67400 45100 67700 45100 10 line
67400 44550 50 0 360 10 darc
67400 45100 67400 45400 10 line
67400 44300 67400 44500 10 line
grestore
67400 45400 67400 46000 10 line
gsave
false false false true 260.000000 [(a2) ] 0 67200 46300 180.555557 text
grestore
67400 44300 67400 43300 10 line
79200 43300 67400 43300 10 line
68300 44300 68300 43800 10 line
68300 43800 79200 43800 10 line
79200 44300 69500 44300 10 line
67400 45700 67000 45700 10 line
67000 45700 67000 43100 10 line
79200 43100 67000 43100 10 line
68300 45700 67900 45700 10 line
67900 45700 67900 43600 10 line
79200 43600 67900 43600 10 line
69500 45700 69100 45700 10 line
69100 42300 69100 45700 10 line
79200 44100 69100 44100 10 line
68600 40700 68600 41000 10 line
gsave
false false false true 260.000000 [(d7) ] 0 68300 40600 180.555557 text
grestore
70000 40700 70000 41000 10 line
gsave
false false false true 260.000000 [(d6) ] 0 69700 40600 180.555557 text
grestore
71400 40700 71400 41000 10 line
gsave
false false false true 260.000000 [(d5) ] 0 71100 40600 180.555557 text
grestore
72800 40700 72800 41000 10 line
gsave
false false false true 260.000000 [(d4) ] 0 72500 40600 180.555557 text
grestore
68800 42300 68800 43600 10 line
68400 42300 68400 43100 10 line
70500 42300 70500 44300 10 line
70200 42300 70200 43600 10 line
69800 42300 69800 43100 10 line
71200 42300 71200 43100 10 line
71600 42300 71600 43800 10 line
71900 42300 71900 44100 10 line
72600 42300 72600 43100 10 line
73000 42300 73000 43800 10 line
73300 42300 73300 44300 10 line
74000 42300 74000 43300 10 line
74400 42300 74400 43600 10 line
74700 42300 74700 44100 10 line
75400 42300 75400 43300 10 line
75800 43600 75800 42300 10 line
76100 42300 76100 44300 10 line
76800 42300 76800 43300 10 line
77200 42300 77200 43800 10 line
77500 42300 77500 44100 10 line
78200 42300 78200 43300 10 line
78600 42300 78600 43800 10 line
78900 42300 78900 44300 10 line
gsave
74200 41000 74200 41300 10 line
74700 42300 74700 42000 10 line
74400 42300 74400 42000 10 line
74000 42300 74000 42000 10 line
73700 42300 73700 42000 10 line
73900 42000 74500 42000 10 line
74500 42000 74500 41600 10 line
73900 42000 73900 41600 10 line
74200 41600 300 180 360 10 darc
73900 42000 73700 42000 10 line
74700 42000 74500 42000 10 line
74700 42000 74800 42000 10 line
73600 42000 73700 42000 10 line
grestore
gsave
75600 41000 75600 41300 10 line
76100 42300 76100 42000 10 line
75800 42300 75800 42000 10 line
75400 42300 75400 42000 10 line
75100 42300 75100 42000 10 line
75300 42000 75900 42000 10 line
75900 42000 75900 41600 10 line
75300 42000 75300 41600 10 line
75600 41600 300 180 360 10 darc
75300 42000 75100 42000 10 line
76100 42000 75900 42000 10 line
76100 42000 76200 42000 10 line
75000 42000 75100 42000 10 line
grestore
gsave
77000 41000 77000 41300 10 line
77500 42300 77500 42000 10 line
77200 42300 77200 42000 10 line
76800 42300 76800 42000 10 line
76500 42300 76500 42000 10 line
76700 42000 77300 42000 10 line
77300 42000 77300 41600 10 line
76700 42000 76700 41600 10 line
77000 41600 300 180 360 10 darc
76700 42000 76500 42000 10 line
77500 42000 77300 42000 10 line
77500 42000 77600 42000 10 line
76400 42000 76500 42000 10 line
grestore
gsave
78400 41000 78400 41300 10 line
78900 42300 78900 42000 10 line
78600 42300 78600 42000 10 line
78200 42300 78200 42000 10 line
77900 42300 77900 42000 10 line
78100 42000 78700 42000 10 line
78700 42000 78700 41600 10 line
78100 42000 78100 41600 10 line
78400 41600 300 180 360 10 darc
78100 42000 77900 42000 10 line
78900 42000 78700 42000 10 line
78900 42000 79000 42000 10 line
77800 42000 77900 42000 10 line
grestore
gsave
72800 41000 72800 41300 10 line
73300 42300 73300 42000 10 line
73000 42300 73000 42000 10 line
72600 42300 72600 42000 10 line
72300 42300 72300 42000 10 line
72500 42000 73100 42000 10 line
73100 42000 73100 41600 10 line
72500 42000 72500 41600 10 line
72800 41600 300 180 360 10 darc
72500 42000 72300 42000 10 line
73300 42000 73100 42000 10 line
73300 42000 73400 42000 10 line
72200 42000 72300 42000 10 line
grestore
gsave
71400 41000 71400 41300 10 line
71900 42300 71900 42000 10 line
71600 42300 71600 42000 10 line
71200 42300 71200 42000 10 line
70900 42300 70900 42000 10 line
71100 42000 71700 42000 10 line
71700 42000 71700 41600 10 line
71100 42000 71100 41600 10 line
71400 41600 300 180 360 10 darc
71100 42000 70900 42000 10 line
71900 42000 71700 42000 10 line
71900 42000 72000 42000 10 line
70800 42000 70900 42000 10 line
grestore
gsave
70000 41000 70000 41300 10 line
70500 42300 70500 42000 10 line
70200 42300 70200 42000 10 line
69800 42300 69800 42000 10 line
69500 42300 69500 42000 10 line
69700 42000 70300 42000 10 line
70300 42000 70300 41600 10 line
69700 42000 69700 41600 10 line
70000 41600 300 180 360 10 darc
69700 42000 69500 42000 10 line
70500 42000 70300 42000 10 line
70500 42000 70600 42000 10 line
69400 42000 69500 42000 10 line
grestore
gsave
68600 41000 68600 41300 10 line
69100 42300 69100 42000 10 line
68800 42300 68800 42000 10 line
68400 42300 68400 42000 10 line
68100 42300 68100 42000 10 line
68300 42000 68900 42000 10 line
68900 42000 68900 41600 10 line
68300 42000 68300 41600 10 line
68600 41600 300 180 360 10 darc
68300 42000 68100 42000 10 line
69100 42000 68900 42000 10 line
69100 42000 69200 42000 10 line
68000 42000 68100 42000 10 line
grestore
79200 42600 66600 42600 10 line
gsave
false false false false 260.000000 [(e) ] 0 66400 42700 180.555557 text
grestore
68100 42300 68100 42600 10 line
69500 42300 69500 42600 10 line
70900 42300 70900 42600 10 line
72300 42300 72300 42600 10 line
73700 42300 73700 42600 10 line
75100 42300 75100 42600 10 line
76500 42300 76500 42600 10 line
77900 42300 77900 42600 10 line
66300 40200 79400 40200 10 line
79400 40200 79400 46400 10 line
79400 46400 66300 46400 10 line
66300 46400 66300 40200 10 line
60 60 68270 45970 fbox
newpath
68300 45700
25
0 360 arc
fill
60 60 69470 45970 fbox
newpath
69500 45700
25
0 360 arc
fill
60 60 74170 40670 fbox
60 60 75570 40670 fbox
60 60 76970 40670 fbox
60 60 78370 40670 fbox
60 60 67370 45970 fbox
newpath
67400 45700
25
0 360 arc
fill
60 60 79170 43270 fbox
newpath
74000 43300
25
0 360 arc
fill
newpath
75400 43300
25
0 360 arc
fill
newpath
76800 43300
25
0 360 arc
fill
newpath
78200 43300
25
0 360 arc
fill
60 60 79170 43770 fbox
newpath
71600 43800
25
0 360 arc
fill
newpath
73000 43800
25
0 360 arc
fill
newpath
77200 43800
25
0 360 arc
fill
newpath
78600 43800
25
0 360 arc
fill
60 60 79170 44270 fbox
newpath
70500 44300
25
0 360 arc
fill
newpath
73300 44300
25
0 360 arc
fill
newpath
76100 44300
25
0 360 arc
fill
newpath
78900 44300
25
0 360 arc
fill
newpath
67400 45700
25
0 360 arc
fill
newpath
67400 45700
25
0 360 arc
fill
60 60 79170 43070 fbox
newpath
68400 43100
25
0 360 arc
fill
newpath
69800 43100
25
0 360 arc
fill
newpath
71200 43100
25
0 360 arc
fill
newpath
72600 43100
25
0 360 arc
fill
newpath
68300 45700
25
0 360 arc
fill
newpath
68300 45700
25
0 360 arc
fill
60 60 79170 43570 fbox
newpath
68800 43600
25
0 360 arc
fill
newpath
70200 43600
25
0 360 arc
fill
newpath
74400 43600
25
0 360 arc
fill
newpath
75800 43600
25
0 360 arc
fill
newpath
69500 45700
25
0 360 arc
fill
newpath
69500 45700
25
0 360 arc
fill
newpath
69100 44100
25
0 360 arc
fill
60 60 79170 44070 fbox
newpath
69100 44100
25
0 360 arc
fill
newpath
69100 44100
25
0 360 arc
fill
newpath
71900 44100
25
0 360 arc
fill
newpath
74700 44100
25
0 360 arc
fill
newpath
77500 44100
25
0 360 arc
fill
60 60 68570 40670 fbox
60 60 69970 40670 fbox
60 60 71370 40670 fbox
60 60 72770 40670 fbox
newpath
68800 43600
25
0 360 arc
fill
newpath
68800 43600
25
0 360 arc
fill
newpath
68400 43100
25
0 360 arc
fill
newpath
68400 43100
25
0 360 arc
fill
newpath
70500 44300
25
0 360 arc
fill
newpath
70500 44300
25
0 360 arc
fill
newpath
70200 43600
25
0 360 arc
fill
newpath
70200 43600
25
0 360 arc
fill
newpath
69800 43100
25
0 360 arc
fill
newpath
69800 43100
25
0 360 arc
fill
newpath
71200 43100
25
0 360 arc
fill
newpath
71200 43100
25
0 360 arc
fill
newpath
71600 43800
25
0 360 arc
fill
newpath
71600 43800
25
0 360 arc
fill
newpath
71900 44100
25
0 360 arc
fill
newpath
71900 44100
25
0 360 arc
fill
newpath
72600 43100
25
0 360 arc
fill
newpath
72600 43100
25
0 360 arc
fill
newpath
73000 43800
25
0 360 arc
fill
newpath
73000 43800
25
0 360 arc
fill
newpath
73300 44300
25
0 360 arc
fill
newpath
73300 44300
25
0 360 arc
fill
newpath
74000 43300
25
0 360 arc
fill
newpath
74000 43300
25
0 360 arc
fill
newpath
74400 43600
25
0 360 arc
fill
newpath
74400 43600
25
0 360 arc
fill
newpath
74700 44100
25
0 360 arc
fill
newpath
74700 44100
25
0 360 arc
fill
newpath
75400 43300
25
0 360 arc
fill
newpath
75400 43300
25
0 360 arc
fill
newpath
75800 43600
25
0 360 arc
fill
newpath
75800 43600
25
0 360 arc
fill
newpath
76100 44300
25
0 360 arc
fill
newpath
76100 44300
25
0 360 arc
fill
newpath
76800 43300
25
0 360 arc
fill
newpath
76800 43300
25
0 360 arc
fill
newpath
77200 43800
25
0 360 arc
fill
newpath
77200 43800
25
0 360 arc
fill
newpath
77500 44100
25
0 360 arc
fill
newpath
77500 44100
25
0 360 arc
fill
newpath
78200 43300
25
0 360 arc
fill
newpath
78200 43300
25
0 360 arc
fill
newpath
78600 43800
25
0 360 arc
fill
newpath
78600 43800
25
0 360 arc
fill
newpath
78900 44300
25
0 360 arc
fill
newpath
78900 44300
25
0 360 arc
fill
60 60 79170 42570 fbox
60 60 66570 42570 fbox
newpath
68100 42600
25
0 360 arc
fill
newpath
69500 42600
25
0 360 arc
fill
newpath
70900 42600
25
0 360 arc
fill
newpath
72300 42600
25
0 360 arc
fill
newpath
73700 42600
25
0 360 arc
fill
newpath
75100 42600
25
0 360 arc
fill
newpath
76500 42600
25
0 360 arc
fill
newpath
77900 42600
25
0 360 arc
fill
newpath
68100 42600
25
0 360 arc
fill
newpath
68100 42600
25
0 360 arc
fill
newpath
69500 42600
25
0 360 arc
fill
newpath
69500 42600
25
0 360 arc
fill
newpath
70900 42600
25
0 360 arc
fill
newpath
70900 42600
25
0 360 arc
fill
newpath
72300 42600
25
0 360 arc
fill
newpath
72300 42600
25
0 360 arc
fill
newpath
73700 42600
25
0 360 arc
fill
newpath
73700 42600
25
0 360 arc
fill
newpath
75100 42600
25
0 360 arc
fill
newpath
75100 42600
25
0 360 arc
fill
newpath
76500 42600
25
0 360 arc
fill
newpath
76500 42600
25
0 360 arc
fill
newpath
77900 42600
25
0 360 arc
fill
newpath
77900 42600
25
0 360 arc
fill
showpage
%%End
