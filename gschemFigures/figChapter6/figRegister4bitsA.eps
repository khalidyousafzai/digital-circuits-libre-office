%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Sat Jul 28 15:16:20 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figChapter6/figRegister4bitsA.sch
%%Author: (null)
%%BoundingBox: 0 0 554 698
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-41300 -43900 translate
gsave
47300 51400 47900 51400 10 line
47900 51400 47900 52400 10 line
47900 52400 47300 52400 10 line
47300 52400 47300 51400 10 line
47000 52200 47300 52200 10 line
gsave
false false false false 260.000000 [(D) ] 0 47330 52120 180.555557 text
grestore
47000 51900 47300 51900 10 line
gsave
false false false false 260.000000 [(C) ] 0 47455 51845 180.555557 text
grestore
48200 52200 47900 52200 10 line
gsave
false false false false 260.000000 [(Q) ] 0 47700 52100 180.555557 text
grestore
48200 51600 48000 51600 10 line
gsave
false false false false 260.000000 [(\\_Q\\_) ] 0 47700 51600 180.555557 text
grestore
47300 52000 47400 51900 10 line
47400 51900 47300 51800 10 line
47600 52450 50 0 360 10 darc
47600 51350 50 0 360 10 darc
47600 52700 47600 52500 10 line
47600 51100 47600 51300 10 line
47950 51600 50 0 360 10 darc
gsave
false false false false 260.000000 [(S) ] 0 47525 52225 180.555557 text
grestore
gsave
false false false false 260.000000 [(R) ] 0 47525 51425 180.555557 text
grestore
grestore
gsave
47300 49400 47900 49400 10 line
47900 49400 47900 50400 10 line
47900 50400 47300 50400 10 line
47300 50400 47300 49400 10 line
47000 50200 47300 50200 10 line
gsave
false false false false 260.000000 [(D) ] 0 47330 50120 180.555557 text
grestore
47000 49900 47300 49900 10 line
gsave
false false false false 260.000000 [(C) ] 0 47455 49845 180.555557 text
grestore
48200 50200 47900 50200 10 line
gsave
false false false false 260.000000 [(Q) ] 0 47700 50100 180.555557 text
grestore
48200 49600 48000 49600 10 line
gsave
false false false false 260.000000 [(\\_Q\\_) ] 0 47700 49600 180.555557 text
grestore
47300 50000 47400 49900 10 line
47400 49900 47300 49800 10 line
47600 50450 50 0 360 10 darc
47600 49350 50 0 360 10 darc
47600 50700 47600 50500 10 line
47600 49100 47600 49300 10 line
47950 49600 50 0 360 10 darc
gsave
false false false false 260.000000 [(S) ] 0 47525 50225 180.555557 text
grestore
gsave
false false false false 260.000000 [(R) ] 0 47525 49425 180.555557 text
grestore
grestore
gsave
47300 47400 47900 47400 10 line
47900 47400 47900 48400 10 line
47900 48400 47300 48400 10 line
47300 48400 47300 47400 10 line
47000 48200 47300 48200 10 line
gsave
false false false false 260.000000 [(D) ] 0 47330 48120 180.555557 text
grestore
47000 47900 47300 47900 10 line
gsave
false false false false 260.000000 [(C) ] 0 47455 47845 180.555557 text
grestore
48200 48200 47900 48200 10 line
gsave
false false false false 260.000000 [(Q) ] 0 47700 48100 180.555557 text
grestore
48200 47600 48000 47600 10 line
gsave
false false false false 260.000000 [(\\_Q\\_) ] 0 47700 47600 180.555557 text
grestore
47300 48000 47400 47900 10 line
47400 47900 47300 47800 10 line
47600 48450 50 0 360 10 darc
47600 47350 50 0 360 10 darc
47600 48700 47600 48500 10 line
47600 47100 47600 47300 10 line
47950 47600 50 0 360 10 darc
gsave
false false false false 260.000000 [(S) ] 0 47525 48225 180.555557 text
grestore
gsave
false false false false 260.000000 [(R) ] 0 47525 47425 180.555557 text
grestore
grestore
gsave
47300 45400 47900 45400 10 line
47900 45400 47900 46400 10 line
47900 46400 47300 46400 10 line
47300 46400 47300 45400 10 line
47000 46200 47300 46200 10 line
gsave
false false false false 260.000000 [(D) ] 0 47330 46120 180.555557 text
grestore
47000 45900 47300 45900 10 line
gsave
false false false false 260.000000 [(C) ] 0 47455 45845 180.555557 text
grestore
48200 46200 47900 46200 10 line
gsave
false false false false 260.000000 [(Q) ] 0 47700 46100 180.555557 text
grestore
48200 45600 48000 45600 10 line
gsave
false false false false 260.000000 [(\\_Q\\_) ] 0 47700 45600 180.555557 text
grestore
47300 46000 47400 45900 10 line
47400 45900 47300 45800 10 line
47600 46450 50 0 360 10 darc
47600 45350 50 0 360 10 darc
47600 46700 47600 46500 10 line
47600 45100 47600 45300 10 line
47950 45600 50 0 360 10 darc
gsave
false false false false 260.000000 [(S) ] 0 47525 46225 180.555557 text
grestore
gsave
false false false false 260.000000 [(R) ] 0 47525 45425 180.555557 text
grestore
grestore
47000 51900 46100 51900 10 line
46100 44600 46100 51900 10 line
gsave
false false false false 260.000000 [(C) ] 0 45900 44400 180.555557 text
grestore
46100 45900 47000 45900 10 line
47000 47900 46100 47900 10 line
47000 49900 46100 49900 10 line
47000 52200 45600 52200 10 line
gsave
false false false false 260.000000 [(A3) ] 0 45300 52200 180.555557 text
grestore
47000 50200 45600 50200 10 line
gsave
false false false false 260.000000 [(A2) ] 0 45300 50200 180.555557 text
grestore
47000 48200 45600 48200 10 line
gsave
false false false false 260.000000 [(A1) ] 0 45300 48200 180.555557 text
grestore
47000 46200 45600 46200 10 line
gsave
false false false false 260.000000 [(A0) ] 0 45300 46200 180.555557 text
grestore
48500 52200 48200 52200 10 line
gsave
false false false false 260.000000 [(B3) ] 0 48600 52200 180.555557 text
grestore
48500 50200 48200 50200 10 line
gsave
false false false false 260.000000 [(B2) ] 0 48600 50200 180.555557 text
grestore
48500 48200 48200 48200 10 line
gsave
false false false false 260.000000 [(B1) ] 0 48600 48200 180.555557 text
grestore
48500 46200 48200 46200 10 line
gsave
false false false false 260.000000 [(B0) ] 0 48600 46200 180.555557 text
grestore
47600 52700 47600 52800 10 line
46500 52800 47600 52800 10 line
46500 46800 46500 53000 10 line
46500 46800 47600 46800 10 line
47600 46800 47600 46700 10 line
47600 48700 47600 48800 10 line
47600 48800 46500 48800 10 line
47600 50700 47600 50800 10 line
47600 50800 46500 50800 10 line
47600 51100 47600 51000 10 line
47600 51000 46800 51000 10 line
46800 51000 46800 44600 10 line
47600 45100 47600 45000 10 line
47600 45000 46800 45000 10 line
47600 47100 47600 47000 10 line
47600 47000 46800 47000 10 line
47600 49100 47600 49000 10 line
47600 49000 46800 49000 10 line
gsave
42900 51400 43500 51400 10 line
43500 51400 43500 52400 10 line
43500 52400 42900 52400 10 line
42900 52400 42900 51400 10 line
42600 52200 42900 52200 10 line
42600 51900 42900 51900 10 line
43800 52200 43500 52200 10 line
43800 51600 43500 51600 10 line
42900 52000 43000 51900 10 line
43000 51900 42900 51800 10 line
gsave
false false false false 260.000000 [(D) ] 0 42955 52195 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 43055 51845 180.555557 text
grestore
gsave
false true false false 260.000000 [(Q) ] 0 43445 52195 180.555557 text
grestore
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 43445 51595 180.555557 text
grestore
grestore
gsave
42900 49400 43500 49400 10 line
43500 49400 43500 50400 10 line
43500 50400 42900 50400 10 line
42900 50400 42900 49400 10 line
42600 50200 42900 50200 10 line
42600 49900 42900 49900 10 line
43800 50200 43500 50200 10 line
43800 49600 43500 49600 10 line
42900 50000 43000 49900 10 line
43000 49900 42900 49800 10 line
gsave
false false false false 260.000000 [(D) ] 0 42955 50195 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 43055 49845 180.555557 text
grestore
gsave
false true false false 260.000000 [(Q) ] 0 43445 50195 180.555557 text
grestore
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 43445 49595 180.555557 text
grestore
grestore
gsave
42900 47400 43500 47400 10 line
43500 47400 43500 48400 10 line
43500 48400 42900 48400 10 line
42900 48400 42900 47400 10 line
42600 48200 42900 48200 10 line
42600 47900 42900 47900 10 line
43800 48200 43500 48200 10 line
43800 47600 43500 47600 10 line
42900 48000 43000 47900 10 line
43000 47900 42900 47800 10 line
gsave
false false false false 260.000000 [(D) ] 0 42955 48195 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 43055 47845 180.555557 text
grestore
gsave
false true false false 260.000000 [(Q) ] 0 43445 48195 180.555557 text
grestore
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 43445 47595 180.555557 text
grestore
grestore
gsave
42900 45400 43500 45400 10 line
43500 45400 43500 46400 10 line
43500 46400 42900 46400 10 line
42900 46400 42900 45400 10 line
42600 46200 42900 46200 10 line
42600 45900 42900 45900 10 line
43800 46200 43500 46200 10 line
43800 45600 43500 45600 10 line
42900 46000 43000 45900 10 line
43000 45900 42900 45800 10 line
gsave
false false false false 260.000000 [(D) ] 0 42955 46195 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 43055 45845 180.555557 text
grestore
gsave
false true false false 260.000000 [(Q) ] 0 43445 46195 180.555557 text
grestore
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 43445 45595 180.555557 text
grestore
grestore
42600 52200 41800 52200 10 line
42600 50200 41800 50200 10 line
42600 48200 41800 48200 10 line
42600 46200 41800 46200 10 line
42200 51900 42600 51900 10 line
42200 51900 42200 44700 10 line
42600 45900 42200 45900 10 line
42600 47900 42200 47900 10 line
42600 49900 42200 49900 10 line
44100 52200 43800 52200 10 line
44100 50200 43800 50200 10 line
44100 48200 43800 48200 10 line
44100 46200 43800 46200 10 line
gsave
false false false false 260.000000 [(A0) ] 0 41500 46200 180.555557 text
grestore
gsave
false false false false 260.000000 [(A1) ] 0 41500 48200 180.555557 text
grestore
gsave
false false false false 260.000000 [(A2) ] 0 41500 50200 180.555557 text
grestore
gsave
false false false false 260.000000 [(A3) ] 0 41500 52200 180.555557 text
grestore
gsave
false false false false 260.000000 [(B0) ] 0 44200 46200 180.555557 text
grestore
gsave
false false false false 260.000000 [(B1) ] 0 44200 48200 180.555557 text
grestore
gsave
false false false false 260.000000 [(B2) ] 0 44200 50200 180.555557 text
grestore
gsave
false false false false 260.000000 [(B3) ] 0 44200 52200 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 42000 44500 180.555557 text
grestore
41300 43900 49000 43900 10 line
49000 43900 49000 53600 10 line
49000 53600 41300 53600 10 line
41300 53600 41300 43900 10 line
60 60 46070 44570 fbox
newpath
46100 45900
25
0 360 arc
fill
newpath
46100 47900
25
0 360 arc
fill
newpath
46100 49900
25
0 360 arc
fill
newpath
46100 45900
25
0 360 arc
fill
newpath
46100 45900
25
0 360 arc
fill
newpath
46100 47900
25
0 360 arc
fill
newpath
46100 47900
25
0 360 arc
fill
newpath
46100 49900
25
0 360 arc
fill
newpath
46100 49900
25
0 360 arc
fill
60 60 45570 52170 fbox
60 60 45570 50170 fbox
60 60 45570 48170 fbox
60 60 45570 46170 fbox
60 60 48470 52170 fbox
60 60 48470 50170 fbox
60 60 48470 48170 fbox
60 60 48470 46170 fbox
newpath
46500 52800
25
0 360 arc
fill
newpath
46500 52800
25
0 360 arc
fill
60 60 46470 52970 fbox
newpath
46500 48800
25
0 360 arc
fill
newpath
46500 50800
25
0 360 arc
fill
newpath
46500 52800
25
0 360 arc
fill
newpath
46500 48800
25
0 360 arc
fill
newpath
46500 48800
25
0 360 arc
fill
newpath
46500 50800
25
0 360 arc
fill
newpath
46500 50800
25
0 360 arc
fill
60 60 46770 44570 fbox
newpath
46800 45000
25
0 360 arc
fill
newpath
46800 47000
25
0 360 arc
fill
newpath
46800 49000
25
0 360 arc
fill
newpath
46800 45000
25
0 360 arc
fill
newpath
46800 45000
25
0 360 arc
fill
newpath
46800 47000
25
0 360 arc
fill
newpath
46800 47000
25
0 360 arc
fill
newpath
46800 49000
25
0 360 arc
fill
newpath
46800 49000
25
0 360 arc
fill
60 60 41770 52170 fbox
60 60 41770 50170 fbox
60 60 41770 48170 fbox
60 60 41770 46170 fbox
60 60 42170 44670 fbox
newpath
42200 45900
25
0 360 arc
fill
newpath
42200 47900
25
0 360 arc
fill
newpath
42200 49900
25
0 360 arc
fill
newpath
42200 45900
25
0 360 arc
fill
newpath
42200 45900
25
0 360 arc
fill
newpath
42200 47900
25
0 360 arc
fill
newpath
42200 47900
25
0 360 arc
fill
newpath
42200 49900
25
0 360 arc
fill
newpath
42200 49900
25
0 360 arc
fill
60 60 44070 52170 fbox
60 60 44070 50170 fbox
60 60 44070 48170 fbox
60 60 44070 46170 fbox
showpage
%%End
