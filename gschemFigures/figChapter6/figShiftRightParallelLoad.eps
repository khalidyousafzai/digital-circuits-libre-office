%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Mon Jul 30 11:56:19 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figChapter6/figShiftRightParallelLoad.sch
%%Author: (null)
%%BoundingBox: 0 0 792 604
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-39400 -46000 translate
gsave
42200 51300 43200 51300 10 line
43200 51300 43200 51900 10 line
43200 51900 42200 51900 10 line
42200 51900 42200 51300 10 line
42400 51000 42400 51300 10 line
gsave
false false false false 260.000000 [(D) ] 90 42405 51355 180.555557 text
grestore
42700 51000 42700 51300 10 line
gsave
false false false false 260.000000 [(C) ] 90 42755 51455 180.555557 text
grestore
42400 52200 42400 51900 10 line
gsave
false true false false 260.000000 [(Q) ] 90 42405 51845 180.555557 text
grestore
43000 52200 43000 51900 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 90 43005 51845 180.555557 text
grestore
42600 51300 42700 51400 10 line
42700 51400 42800 51300 10 line
grestore
gsave
44200 51300 45200 51300 10 line
45200 51300 45200 51900 10 line
45200 51900 44200 51900 10 line
44200 51900 44200 51300 10 line
44400 51000 44400 51300 10 line
gsave
false false false false 260.000000 [(D) ] 90 44405 51355 180.555557 text
grestore
44700 51000 44700 51300 10 line
gsave
false false false false 260.000000 [(C) ] 90 44755 51455 180.555557 text
grestore
44400 52200 44400 51900 10 line
gsave
false true false false 260.000000 [(Q) ] 90 44405 51845 180.555557 text
grestore
45000 52200 45000 51900 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 90 45005 51845 180.555557 text
grestore
44600 51300 44700 51400 10 line
44700 51400 44800 51300 10 line
grestore
gsave
46200 51300 47200 51300 10 line
47200 51300 47200 51900 10 line
47200 51900 46200 51900 10 line
46200 51900 46200 51300 10 line
46400 51000 46400 51300 10 line
gsave
false false false false 260.000000 [(D) ] 90 46405 51355 180.555557 text
grestore
46700 51000 46700 51300 10 line
gsave
false false false false 260.000000 [(C) ] 90 46755 51455 180.555557 text
grestore
46400 52200 46400 51900 10 line
gsave
false true false false 260.000000 [(Q) ] 90 46405 51845 180.555557 text
grestore
47000 52200 47000 51900 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 90 47005 51845 180.555557 text
grestore
46600 51300 46700 51400 10 line
46700 51400 46800 51300 10 line
grestore
gsave
48200 51300 49200 51300 10 line
49200 51300 49200 51900 10 line
49200 51900 48200 51900 10 line
48200 51900 48200 51300 10 line
48400 51000 48400 51300 10 line
gsave
false false false false 260.000000 [(D) ] 90 48405 51355 180.555557 text
grestore
48700 51000 48700 51300 10 line
gsave
false false false false 260.000000 [(C) ] 90 48755 51455 180.555557 text
grestore
48400 52200 48400 51900 10 line
gsave
false true false false 260.000000 [(Q) ] 90 48405 51845 180.555557 text
grestore
49000 52200 49000 51900 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 90 49005 51845 180.555557 text
grestore
48600 51300 48700 51400 10 line
48700 51400 48800 51300 10 line
grestore
48400 52200 48400 52600 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 48100 52300 180.555557 text
grestore
46400 52200 46400 52600 10 line
gsave
false false false false 260.000000 [(Q1) ] 0 46100 52300 180.555557 text
grestore
44400 52200 44400 52600 10 line
gsave
false false false false 260.000000 [(Q2) ] 0 44100 52400 180.555557 text
grestore
48700 51000 48700 50800 10 line
48700 50800 41000 50800 10 line
gsave
false false false false 260.000000 [(C) ] 0 40800 50800 180.555557 text
grestore
42700 51000 42700 50800 10 line
44700 51000 44700 50800 10 line
46700 51000 46700 50800 10 line
42400 52600 42400 52200 10 line
gsave
false false false false 260.000000 [(Q3) ] 0 42100 52300 180.555557 text
grestore
gsave
48700 49765 48700 50100 10 line
48100 49765 48100 50100 10 line
48400 49500 400 42 138 10 darc
48300 50100 400 0 76 10 darc
48500 50100 400 104 180 10 darc
48200 49847 48200 49500 10 line
48600 49847 48600 49500 10 line
48400 50700 48400 50488 10 line
grestore
gsave
46700 49765 46700 50100 10 line
46100 49765 46100 50100 10 line
46400 49500 400 42 138 10 darc
46300 50100 400 0 76 10 darc
46500 50100 400 104 180 10 darc
46200 49847 46200 49500 10 line
46600 49847 46600 49500 10 line
46400 50700 46400 50488 10 line
grestore
gsave
44700 49765 44700 50100 10 line
44100 49765 44100 50100 10 line
44400 49500 400 42 138 10 darc
44300 50100 400 0 76 10 darc
44500 50100 400 104 180 10 darc
44200 49847 44200 49500 10 line
44600 49847 44600 49500 10 line
44400 50700 44400 50488 10 line
grestore
gsave
42700 49765 42700 50100 10 line
42100 49765 42100 50100 10 line
42400 49500 400 42 138 10 darc
42300 50100 400 0 76 10 darc
42500 50100 400 104 180 10 darc
42200 49847 42200 49500 10 line
42600 49847 42600 49500 10 line
42400 50700 42400 50488 10 line
grestore
48400 50700 48400 51000 10 line
46400 50700 46400 51000 10 line
44400 50700 44400 51000 10 line
42400 50700 42400 51000 10 line
gsave
41800 48000 41800 48300 10 line
42200 48000 42200 48300 10 line
42000 49000 42000 49300 10 line
42300 48300 41700 48300 10 line
41700 48300 41700 48700 10 line
42300 48300 42300 48700 10 line
42000 48700 300 0 180 10 darc
grestore
gsave
42600 48000 42600 48300 10 line
43000 48000 43000 48300 10 line
42800 49000 42800 49300 10 line
43100 48300 42500 48300 10 line
42500 48300 42500 48700 10 line
43100 48300 43100 48700 10 line
42800 48700 300 0 180 10 darc
grestore
gsave
43800 48000 43800 48300 10 line
44200 48000 44200 48300 10 line
44000 49000 44000 49300 10 line
44300 48300 43700 48300 10 line
43700 48300 43700 48700 10 line
44300 48300 44300 48700 10 line
44000 48700 300 0 180 10 darc
grestore
gsave
44600 48000 44600 48300 10 line
45000 48000 45000 48300 10 line
44800 49000 44800 49300 10 line
45100 48300 44500 48300 10 line
44500 48300 44500 48700 10 line
45100 48300 45100 48700 10 line
44800 48700 300 0 180 10 darc
grestore
gsave
45800 48000 45800 48300 10 line
46200 48000 46200 48300 10 line
46000 49000 46000 49300 10 line
46300 48300 45700 48300 10 line
45700 48300 45700 48700 10 line
46300 48300 46300 48700 10 line
46000 48700 300 0 180 10 darc
grestore
gsave
46600 48000 46600 48300 10 line
47000 48000 47000 48300 10 line
46800 49000 46800 49300 10 line
47100 48300 46500 48300 10 line
46500 48300 46500 48700 10 line
47100 48300 47100 48700 10 line
46800 48700 300 0 180 10 darc
grestore
gsave
47800 48000 47800 48300 10 line
48200 48000 48200 48300 10 line
48000 49000 48000 49300 10 line
48300 48300 47700 48300 10 line
47700 48300 47700 48700 10 line
48300 48300 48300 48700 10 line
48000 48700 300 0 180 10 darc
grestore
gsave
48600 48000 48600 48300 10 line
49000 48000 49000 48300 10 line
48800 49000 48800 49300 10 line
49100 48300 48500 48300 10 line
48500 48300 48500 48700 10 line
49100 48300 49100 48700 10 line
48800 48700 300 0 180 10 darc
grestore
44200 49500 44200 49400 10 line
44200 49400 44000 49400 10 line
44000 49400 44000 49300 10 line
44600 49500 44600 49400 10 line
44600 49400 44800 49400 10 line
44800 49400 44800 49300 10 line
46200 49500 46200 49400 10 line
46200 49400 46000 49400 10 line
46000 49400 46000 49300 10 line
46600 49500 46600 49400 10 line
46600 49400 46800 49400 10 line
46800 49400 46800 49300 10 line
48200 49500 48200 49400 10 line
48200 49400 48000 49400 10 line
48000 49400 48000 49300 10 line
48600 49500 48600 49400 10 line
48600 49400 48800 49400 10 line
48800 49400 48800 49300 10 line
42600 49500 42600 49400 10 line
42600 49400 42800 49400 10 line
42800 49400 42800 49300 10 line
42200 49500 42200 49400 10 line
42200 49400 42000 49400 10 line
42000 49400 42000 49300 10 line
42400 52300 43600 52300 10 line
43600 47900 43600 52300 10 line
43600 47900 43800 47900 10 line
43800 47900 43800 48000 10 line
44400 52400 45600 52400 10 line
45600 47900 45600 52400 10 line
45600 47900 45800 47900 10 line
45800 47900 45800 48000 10 line
46400 52300 47600 52300 10 line
47600 52300 47600 47900 10 line
47600 47900 47800 47900 10 line
47800 47900 47800 48000 10 line
47000 46400 47000 48000 10 line
gsave
false false false false 260.000000 [(Z1) ] 0 46900 46100 180.555557 text
grestore
45000 46400 45000 48000 10 line
gsave
false false false false 260.000000 [(Z2) ] 0 44900 46100 180.555557 text
grestore
43000 46400 43000 48000 10 line
gsave
false false false false 260.000000 [(Z3) ] 0 42900 46100 180.555557 text
grestore
49000 46400 49000 48000 10 line
gsave
false false false false 260.000000 [(Z0) ] 0 48900 46100 180.555557 text
grestore
41600 47800 41800 47800 10 line
gsave
false false false false 260.000000 [(x) ] 0 40600 47700 180.555557 text
grestore
41800 47800 41800 48000 10 line
41000 47000 41400 47000 10 line
42500 47000 48600 47000 10 line
48600 47000 48600 48000 10 line
46600 48000 46600 47000 10 line
44600 48000 44600 47000 10 line
42600 48000 42600 47000 10 line
48200 48000 48200 47500 10 line
48200 47500 41300 47500 10 line
41300 47500 41300 47000 10 line
42200 48000 42200 47500 10 line
44200 48000 44200 47500 10 line
46200 48000 46200 47500 10 line
39400 46000 50400 46000 10 line
50400 46000 50400 54400 10 line
50400 54400 39400 54400 10 line
39400 54400 39400 46000 10 line
gsave
41700 47300 42200 47000 10 line
42200 47000 41700 46700 10 line
41700 47300 41700 47000 10 line
41700 47000 41700 46700 10 line
42250 47000 50 0 360 10 darc
41700 47000 41400 47000 10 line
42500 47000 42300 47000 10 line
grestore
gsave
42100 52900 42400 53400 10 line
42400 53400 42700 52900 10 line
42100 52900 42400 52900 10 line
42400 52900 42700 52900 10 line
42400 52900 42400 52600 10 line
42400 53700 42400 53400 10 line
42000 53200 42175 53200 10 line
42225 53200 50 0 360 10 darc
grestore
gsave
44100 52900 44400 53400 10 line
44400 53400 44700 52900 10 line
44100 52900 44400 52900 10 line
44400 52900 44700 52900 10 line
44400 52900 44400 52600 10 line
44400 53700 44400 53400 10 line
44000 53200 44175 53200 10 line
44225 53200 50 0 360 10 darc
grestore
gsave
46100 52900 46400 53400 10 line
46400 53400 46700 52900 10 line
46100 52900 46400 52900 10 line
46400 52900 46700 52900 10 line
46400 52900 46400 52600 10 line
46400 53700 46400 53400 10 line
46000 53200 46175 53200 10 line
46225 53200 50 0 360 10 darc
grestore
gsave
48100 52900 48400 53400 10 line
48400 53400 48700 52900 10 line
48100 52900 48400 52900 10 line
48400 52900 48700 52900 10 line
48400 52900 48400 52600 10 line
48400 53700 48400 53400 10 line
48000 53200 48175 53200 10 line
48225 53200 50 0 360 10 darc
grestore
42400 54000 42400 53700 10 line
44400 54000 44400 53700 10 line
46400 54000 46400 53700 10 line
48400 54000 48400 53700 10 line
41000 53600 47900 53600 10 line
47900 53200 47900 53600 10 line
47900 53200 48000 53200 10 line
45900 53600 45900 53200 10 line
45900 53200 46000 53200 10 line
43900 53600 43900 53200 10 line
43900 53200 44000 53200 10 line
41900 53600 41900 53200 10 line
41900 53200 42000 53200 10 line
gsave
false false false false 260.000000 [(B0) ] 0 48300 54100 180.555557 text
grestore
gsave
false false false false 260.000000 [(B1) ] 0 46300 54100 180.555557 text
grestore
gsave
false false false false 260.000000 [(B2) ] 0 44300 54100 180.555557 text
grestore
gsave
false false false false 260.000000 [(B3) ] 0 42300 54100 180.555557 text
grestore
49200 52500 48400 52500 10 line
gsave
49200 52500 49400 52500 10 line
49400 52600 49400 52400 10 line
49400 52600 49900 52600 10 line
49900 52600 50000 52500 10 line
50000 52500 49900 52400 10 line
49900 52400 49400 52400 10 line
grestore
gsave
41400 47800 41600 47800 10 line
40800 47900 40800 47700 10 line
40800 47900 41300 47900 10 line
41300 47900 41400 47800 10 line
41400 47800 41300 47700 10 line
41300 47700 40800 47700 10 line
grestore
newpath
48400 52500
25
0 360 arc
fill
newpath
46400 52300
25
0 360 arc
fill
newpath
44400 52400
25
0 360 arc
fill
60 60 40970 50770 fbox
newpath
42700 50800
25
0 360 arc
fill
newpath
44700 50800
25
0 360 arc
fill
newpath
46700 50800
25
0 360 arc
fill
newpath
42700 50800
25
0 360 arc
fill
newpath
42700 50800
25
0 360 arc
fill
newpath
44700 50800
25
0 360 arc
fill
newpath
44700 50800
25
0 360 arc
fill
newpath
46700 50800
25
0 360 arc
fill
newpath
46700 50800
25
0 360 arc
fill
newpath
42400 52300
25
0 360 arc
fill
newpath
42400 52300
25
0 360 arc
fill
newpath
42400 52300
25
0 360 arc
fill
newpath
44400 52400
25
0 360 arc
fill
newpath
44400 52400
25
0 360 arc
fill
newpath
46400 52300
25
0 360 arc
fill
newpath
46400 52300
25
0 360 arc
fill
60 60 46970 46370 fbox
60 60 44970 46370 fbox
60 60 42970 46370 fbox
60 60 48970 46370 fbox
60 60 40970 46970 fbox
newpath
41300 47000
25
0 360 arc
fill
newpath
46600 47000
25
0 360 arc
fill
newpath
44600 47000
25
0 360 arc
fill
newpath
42600 47000
25
0 360 arc
fill
newpath
46600 47000
25
0 360 arc
fill
newpath
46600 47000
25
0 360 arc
fill
newpath
44600 47000
25
0 360 arc
fill
newpath
44600 47000
25
0 360 arc
fill
newpath
42600 47000
25
0 360 arc
fill
newpath
42600 47000
25
0 360 arc
fill
newpath
42200 47500
25
0 360 arc
fill
newpath
44200 47500
25
0 360 arc
fill
newpath
46200 47500
25
0 360 arc
fill
newpath
41300 47000
25
0 360 arc
fill
newpath
41300 47000
25
0 360 arc
fill
newpath
42200 47500
25
0 360 arc
fill
newpath
42200 47500
25
0 360 arc
fill
newpath
44200 47500
25
0 360 arc
fill
newpath
44200 47500
25
0 360 arc
fill
newpath
46200 47500
25
0 360 arc
fill
newpath
46200 47500
25
0 360 arc
fill
60 60 42370 53970 fbox
60 60 44370 53970 fbox
60 60 46370 53970 fbox
60 60 48370 53970 fbox
60 60 40970 53570 fbox
newpath
45900 53600
25
0 360 arc
fill
newpath
43900 53600
25
0 360 arc
fill
newpath
41900 53600
25
0 360 arc
fill
newpath
45900 53600
25
0 360 arc
fill
newpath
45900 53600
25
0 360 arc
fill
newpath
43900 53600
25
0 360 arc
fill
newpath
43900 53600
25
0 360 arc
fill
newpath
41900 53600
25
0 360 arc
fill
newpath
41900 53600
25
0 360 arc
fill
newpath
48400 52500
25
0 360 arc
fill
newpath
48400 52500
25
0 360 arc
fill
showpage
%%End
