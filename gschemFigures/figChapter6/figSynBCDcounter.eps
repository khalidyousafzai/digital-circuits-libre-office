%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Fri Jan 25 17:32:29 2013
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figChapter6/figSynBCDcounter.sch
%%Author: (null)
%%BoundingBox: 0 0 777 525
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-42400 -42600 translate
gsave
44300 48400 45300 48400 10 line
45300 48400 45300 49000 10 line
45300 49000 44300 49000 10 line
44300 49000 44300 48400 10 line
44500 48100 44500 48400 10 line
gsave
false false false false 260.000000 [(T) ] 0 44455 48495 180.555557 text
grestore
44800 48100 44800 48400 10 line
gsave
false false false false 260.000000 [(C) ] 0 44755 48545 180.555557 text
grestore
44500 49300 44500 49000 10 line
gsave
false true false false 260.000000 [(Q) ] 0 44545 48795 180.555557 text
grestore
45100 49300 45100 49000 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 45145 48795 180.555557 text
grestore
44700 48400 44800 48500 10 line
44800 48500 44900 48400 10 line
45600 48700 45400 48700 10 line
45350 48700 50 0 360 10 darc
grestore
gsave
46200 48400 47200 48400 10 line
47200 48400 47200 49000 10 line
47200 49000 46200 49000 10 line
46200 49000 46200 48400 10 line
46400 48100 46400 48400 10 line
gsave
false false false false 260.000000 [(T) ] 0 46355 48495 180.555557 text
grestore
46700 48100 46700 48400 10 line
gsave
false false false false 260.000000 [(C) ] 0 46655 48545 180.555557 text
grestore
46400 49300 46400 49000 10 line
gsave
false true false false 260.000000 [(Q) ] 0 46445 48795 180.555557 text
grestore
47000 49300 47000 49000 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 47045 48795 180.555557 text
grestore
46600 48400 46700 48500 10 line
46700 48500 46800 48400 10 line
47500 48700 47300 48700 10 line
47250 48700 50 0 360 10 darc
grestore
gsave
48100 48400 49100 48400 10 line
49100 48400 49100 49000 10 line
49100 49000 48100 49000 10 line
48100 49000 48100 48400 10 line
48300 48100 48300 48400 10 line
gsave
false false false false 260.000000 [(T) ] 0 48255 48495 180.555557 text
grestore
48600 48100 48600 48400 10 line
gsave
false false false false 260.000000 [(C) ] 0 48555 48545 180.555557 text
grestore
48300 49300 48300 49000 10 line
gsave
false true false false 260.000000 [(Q) ] 0 48345 48795 180.555557 text
grestore
48900 49300 48900 49000 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 48945 48795 180.555557 text
grestore
48500 48400 48600 48500 10 line
48600 48500 48700 48400 10 line
49400 48700 49200 48700 10 line
49150 48700 50 0 360 10 darc
grestore
gsave
50000 48400 51000 48400 10 line
51000 48400 51000 49000 10 line
51000 49000 50000 49000 10 line
50000 49000 50000 48400 10 line
50200 48100 50200 48400 10 line
gsave
false false false false 260.000000 [(T) ] 0 50155 48495 180.555557 text
grestore
50500 48100 50500 48400 10 line
gsave
false false false false 260.000000 [(C) ] 0 50455 48545 180.555557 text
grestore
50200 49300 50200 49000 10 line
gsave
false true false false 260.000000 [(Q) ] 0 50245 48795 180.555557 text
grestore
50800 49300 50800 49000 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 50845 48795 180.555557 text
grestore
50400 48400 50500 48500 10 line
50500 48500 50600 48400 10 line
51300 48700 51100 48700 10 line
51050 48700 50 0 360 10 darc
grestore
gsave
47900 44300 47900 44600 10 line
48300 44300 48300 44600 10 line
48100 45300 48100 45600 10 line
48400 44600 47800 44600 10 line
47800 44600 47800 45000 10 line
48400 44600 48400 45000 10 line
48100 45000 300 0 180 10 darc
grestore
gsave
46000 44200 46000 44500 10 line
46400 44200 46400 44500 10 line
46200 45200 46200 45500 10 line
46500 44500 45900 44500 10 line
45900 44500 45900 44900 10 line
46500 44500 46500 44900 10 line
46200 44900 300 0 180 10 darc
grestore
gsave
43500 43200 43500 43500 10 line
43900 43200 43900 43500 10 line
43700 44200 43700 44500 10 line
44000 43500 43400 43500 10 line
43400 43500 43400 43900 10 line
44000 43500 44000 43900 10 line
43700 43900 300 0 180 10 darc
grestore
gsave
44500 43200 44500 43500 10 line
44900 43200 44900 43500 10 line
45300 43200 45300 43500 10 line
44900 44200 44900 44500 10 line
45200 43500 44600 43500 10 line
44600 43500 44600 43900 10 line
45200 43500 45200 43900 10 line
44900 43900 300 0 180 10 darc
45200 43500 45400 43500 10 line
44400 43500 44600 43500 10 line
grestore
gsave
44600 45065 44600 45400 10 line
44000 45065 44000 45400 10 line
44300 44800 400 42 138 10 darc
44200 45400 400 0 76 10 darc
44400 45400 400 104 180 10 darc
44100 45147 44100 44800 10 line
44500 45147 44500 44800 10 line
44300 46000 44300 45788 10 line
grestore
44500 44800 44500 44700 10 line
44500 44700 44900 44700 10 line
44900 44700 44900 44500 10 line
44100 44800 44100 44700 10 line
44100 44700 43700 44700 10 line
43700 44700 43700 44500 10 line
50200 48100 50200 47500 10 line
48300 44300 48300 43000 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 48200 42700 180.555557 text
grestore
47900 44300 47900 43000 10 line
gsave
false false false false 260.000000 [(\\_Q3\\_) ] 0 47800 42700 180.555557 text
grestore
46400 44200 46400 43000 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 46300 42700 180.555557 text
grestore
46000 44200 46000 43000 10 line
gsave
false false false false 260.000000 [(Q1) ] 0 45900 42700 180.555557 text
grestore
45300 43200 45300 43000 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 45200 42700 180.555557 text
grestore
44900 43200 44900 43000 10 line
gsave
false false false false 260.000000 [(Q1) ] 0 44800 42700 180.555557 text
grestore
44500 43200 44500 43000 10 line
gsave
false false false false 260.000000 [(Q2) ] 0 44400 42700 180.555557 text
grestore
43900 43200 43900 43000 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 43800 42700 180.555557 text
grestore
43500 43200 43500 43000 10 line
gsave
false false false false 260.000000 [(Q3) ] 0 43400 42700 180.555557 text
grestore
43100 47900 43100 43000 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 43000 42700 180.555557 text
grestore
42700 47900 42700 43000 10 line
gsave
false false false false 260.000000 [(Q3) ] 0 42600 42700 180.555557 text
grestore
50200 49500 50200 49300 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 50100 49600 180.555557 text
grestore
48300 49500 48300 49300 10 line
gsave
false false false false 260.000000 [(Q1) ] 0 48200 49600 180.555557 text
grestore
46400 49500 46400 49300 10 line
gsave
false false false false 260.000000 [(Q2) ] 0 46300 49600 180.555557 text
grestore
44500 49500 44500 49300 10 line
gsave
false false false false 260.000000 [(Q3) ] 0 44400 49600 180.555557 text
grestore
42900 49500 42900 49200 10 line
gsave
false false false false 260.000000 [(y) ] 0 42800 49600 180.555557 text
grestore
45600 48700 45700 48700 10 line
45700 48700 45700 47700 10 line
45700 47700 52100 47700 10 line
51300 48700 51400 48700 10 line
51400 47700 51400 48700 10 line
49400 48700 49500 48700 10 line
49500 48700 49500 47700 10 line
47500 48700 47600 48700 10 line
47600 48700 47600 47700 10 line
44800 48100 44800 48000 10 line
44800 48000 51700 48000 10 line
50500 48100 50500 48000 10 line
48600 48100 48600 48000 10 line
46700 48100 46700 48000 10 line
51700 45000 51700 48000 10 line
gsave
44300 46200 44300 46500 10 line
44700 46200 44700 46500 10 line
44500 47200 44500 47500 10 line
44800 46500 44200 46500 10 line
44200 46500 44200 46900 10 line
44800 46500 44800 46900 10 line
44500 46900 300 0 180 10 darc
grestore
gsave
46200 46200 46200 46500 10 line
46600 46200 46600 46500 10 line
46400 47200 46400 47500 10 line
46700 46500 46100 46500 10 line
46100 46500 46100 46900 10 line
46700 46500 46700 46900 10 line
46400 46900 300 0 180 10 darc
grestore
gsave
48100 46200 48100 46500 10 line
48500 46200 48500 46500 10 line
48300 47200 48300 47500 10 line
48600 46500 48000 46500 10 line
48000 46500 48000 46900 10 line
48600 46500 48600 46900 10 line
48300 46900 300 0 180 10 darc
grestore
gsave
50000 46200 50000 46500 10 line
50400 46200 50400 46500 10 line
50200 47200 50200 47500 10 line
50500 46500 49900 46500 10 line
49900 46500 49900 46900 10 line
50500 46500 50500 46900 10 line
50200 46900 300 0 180 10 darc
grestore
44500 47500 44500 48100 10 line
48300 48100 48300 47500 10 line
46400 48100 46400 47500 10 line
44300 46000 44300 46200 10 line
46200 46200 46200 45500 10 line
48100 46200 48100 45600 10 line
50000 46200 50000 43000 10 line
gsave
false false false false 260.000000 [(1) ] 0 50000 42700 180.555557 text
grestore
44700 46200 44700 46000 10 line
44700 46000 51000 46000 10 line
51000 46000 51000 45000 10 line
50400 46200 50400 46000 10 line
48500 46200 48500 46000 10 line
46600 46200 46600 46000 10 line
42400 42600 53200 42600 10 line
53200 42600 53200 49900 10 line
53200 49900 42400 49900 10 line
42400 49900 42400 42600 10 line
gsave
42700 47900 42700 48200 10 line
43100 47900 43100 48200 10 line
42900 48900 42900 49200 10 line
43200 48200 42600 48200 10 line
42600 48200 42600 48600 10 line
43200 48200 43200 48600 10 line
42900 48600 300 0 180 10 darc
grestore
60 60 48270 42970 fbox
60 60 47870 42970 fbox
60 60 46370 42970 fbox
60 60 45970 42970 fbox
60 60 45270 42970 fbox
60 60 44870 42970 fbox
60 60 44470 42970 fbox
60 60 43870 42970 fbox
60 60 43470 42970 fbox
60 60 43070 42970 fbox
60 60 42670 42970 fbox
60 60 50170 49470 fbox
60 60 48270 49470 fbox
60 60 46370 49470 fbox
60 60 44470 49470 fbox
60 60 42870 49470 fbox
60 60 52070 47670 fbox
newpath
51400 47700
25
0 360 arc
fill
newpath
49500 47700
25
0 360 arc
fill
newpath
47600 47700
25
0 360 arc
fill
newpath
51400 47700
25
0 360 arc
fill
newpath
51400 47700
25
0 360 arc
fill
newpath
49500 47700
25
0 360 arc
fill
newpath
49500 47700
25
0 360 arc
fill
newpath
47600 47700
25
0 360 arc
fill
newpath
47600 47700
25
0 360 arc
fill
newpath
50500 48000
25
0 360 arc
fill
newpath
48600 48000
25
0 360 arc
fill
newpath
46700 48000
25
0 360 arc
fill
newpath
50500 48000
25
0 360 arc
fill
newpath
50500 48000
25
0 360 arc
fill
newpath
48600 48000
25
0 360 arc
fill
newpath
48600 48000
25
0 360 arc
fill
newpath
46700 48000
25
0 360 arc
fill
newpath
46700 48000
25
0 360 arc
fill
60 60 51670 44970 fbox
60 60 49970 42970 fbox
newpath
50400 46000
25
0 360 arc
fill
newpath
48500 46000
25
0 360 arc
fill
newpath
46600 46000
25
0 360 arc
fill
60 60 50970 44970 fbox
newpath
50400 46000
25
0 360 arc
fill
newpath
50400 46000
25
0 360 arc
fill
newpath
48500 46000
25
0 360 arc
fill
newpath
48500 46000
25
0 360 arc
fill
newpath
46600 46000
25
0 360 arc
fill
newpath
46600 46000
25
0 360 arc
fill
showpage
%%End
