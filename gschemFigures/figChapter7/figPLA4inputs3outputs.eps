%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Mon Aug 13 11:27:51 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figChapter7/figPLA4inputs3outputs.sch
%%Author: (null)
%%BoundingBox: 0 0 619 561
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-41800 -43700 translate
gsave
42800 50200 43300 49900 10 line
43300 49900 42800 49600 10 line
42800 50200 42800 49900 10 line
42800 49900 42800 49600 10 line
43050 50100 45 0 360 10 darc
43300 50100 43095 50100 10 line
43300 49700 42975 49700 10 line
42500 49900 42800 49900 10 line
grestore
gsave
42800 49400 43300 49100 10 line
43300 49100 42800 48800 10 line
42800 49400 42800 49100 10 line
42800 49100 42800 48800 10 line
43050 49300 45 0 360 10 darc
43300 49300 43095 49300 10 line
43300 48900 42975 48900 10 line
42500 49100 42800 49100 10 line
grestore
gsave
42800 48600 43300 48300 10 line
43300 48300 42800 48000 10 line
42800 48600 42800 48300 10 line
42800 48300 42800 48000 10 line
43050 48500 45 0 360 10 darc
43300 48500 43095 48500 10 line
43300 48100 42975 48100 10 line
42500 48300 42800 48300 10 line
grestore
gsave
44000 47700 44000 47400 10 line
44000 46700 44000 46400 10 line
43700 47400 44300 47400 10 line
44300 47400 44300 47000 10 line
43700 47400 43700 47000 10 line
44000 47000 300 180 360 10 darc
grestore
gsave
44800 47700 44800 47400 10 line
44800 46700 44800 46400 10 line
44500 47400 45100 47400 10 line
45100 47400 45100 47000 10 line
44500 47400 44500 47000 10 line
44800 47000 300 180 360 10 darc
grestore
gsave
45600 47700 45600 47400 10 line
45600 46700 45600 46400 10 line
45300 47400 45900 47400 10 line
45900 47400 45900 47000 10 line
45300 47400 45300 47000 10 line
45600 47000 300 180 360 10 darc
grestore
gsave
46400 47700 46400 47400 10 line
46400 46700 46400 46400 10 line
46100 47400 46700 47400 10 line
46700 47400 46700 47000 10 line
46100 47400 46100 47000 10 line
46400 47000 300 180 360 10 darc
grestore
gsave
47200 47700 47200 47400 10 line
47200 46700 47200 46400 10 line
46900 47400 47500 47400 10 line
47500 47400 47500 47000 10 line
46900 47400 46900 47000 10 line
47200 47000 300 180 360 10 darc
grestore
gsave
48000 47700 48000 47400 10 line
48000 46700 48000 46400 10 line
47700 47400 48300 47400 10 line
48300 47400 48300 47000 10 line
47700 47400 47700 47000 10 line
48000 47000 300 180 360 10 darc
grestore
gsave
48765 45700 49100 45700 10 line
48765 46300 49100 46300 10 line
48500 46000 400 312 408 10 darc
49100 46100 400 270 346 10 darc
49100 45900 400 14 90 10 darc
48900 46000 48500 46000 10 line
49700 46000 49488 46000 10 line
grestore
gsave
48765 44900 49100 44900 10 line
48765 45500 49100 45500 10 line
48500 45200 400 312 408 10 darc
49100 45300 400 270 346 10 darc
49100 45100 400 14 90 10 darc
48900 45200 48500 45200 10 line
49700 45200 49488 45200 10 line
grestore
gsave
48765 44100 49100 44100 10 line
48765 44700 49100 44700 10 line
48500 44400 400 312 408 10 darc
49100 44500 400 270 346 10 darc
49100 44300 400 14 90 10 darc
48900 44400 48500 44400 10 line
49700 44400 49488 44400 10 line
grestore
gsave
42800 51000 43300 50700 10 line
43300 50700 42800 50400 10 line
42800 51000 42800 50700 10 line
42800 50700 42800 50400 10 line
43050 50900 45 0 360 10 darc
43300 50900 43095 50900 10 line
43300 50500 42975 50500 10 line
42500 50700 42800 50700 10 line
grestore
43300 50900 48500 50900 10 line
43300 50500 48500 50500 10 line
43300 50100 48500 50100 10 line
43300 49700 48500 49700 10 line
43300 49300 48500 49300 10 line
43300 48900 48500 48900 10 line
43300 48500 48500 48500 10 line
43300 48100 48500 48100 10 line
44000 47700 44000 51200 10 line
44800 47700 44800 51200 10 line
45600 47700 45600 51200 10 line
46400 47700 46400 51200 10 line
47200 47700 47200 51200 10 line
48000 47700 48000 51200 10 line
48000 46400 48000 44000 10 line
47200 46400 47200 44000 10 line
46400 46400 46400 44000 10 line
45600 46400 45600 44000 10 line
44800 46400 44800 44000 10 line
44000 46400 44000 44000 10 line
48500 46000 43700 46000 10 line
48500 45200 43700 45200 10 line
48500 44400 43700 44400 10 line
42500 50700 42200 50700 10 line
gsave
false false false false 260.000000 [(A3) ] 0 41900 50700 180.555557 text
grestore
42500 49900 42200 49900 10 line
gsave
false false false false 260.000000 [(A2) ] 0 41900 49900 180.555557 text
grestore
42500 49100 42200 49100 10 line
gsave
false false false false 260.000000 [(A1) ] 0 41900 49100 180.555557 text
grestore
42500 48300 42200 48300 10 line
gsave
false false false false 260.000000 [(A0) ] 0 41900 48300 180.555557 text
grestore
50000 46000 49700 46000 10 line
gsave
false false false false 260.000000 [(D2) ] 0 50100 46000 180.555557 text
grestore
50000 45200 49700 45200 10 line
gsave
false false false false 260.000000 [(D1) ] 0 50100 45200 180.555557 text
grestore
50000 44400 49700 44400 10 line
gsave
false false false false 260.000000 [(D0) ] 0 50100 44400 180.555557 text
grestore
41800 43700 50400 43700 10 line
50400 43700 50400 51500 10 line
50400 51500 41800 51500 10 line
41800 51500 41800 43700 10 line
44100 48200 43900 48000 10 line
43900 48200 44100 48000 10 line
43900 49400 44100 49200 10 line
44100 49400 43900 49200 10 line
43900 50600 44100 50400 10 line
44100 50600 43900 50400 10 line
44700 48600 44900 48400 10 line
44900 48600 44700 48400 10 line
44700 51000 44900 50800 10 line
44900 51000 44700 50800 10 line
44700 44500 44900 44300 10 line
44900 44500 44700 44300 10 line
43900 44500 44100 44300 10 line
44100 44500 43900 44300 10 line
45500 45300 45700 45100 10 line
45700 45300 45500 45100 10 line
45500 49400 45700 49200 10 line
45700 49400 45500 49200 10 line
45500 49800 45700 49600 10 line
45700 49800 45500 49600 10 line
45500 51000 45700 50800 10 line
45700 51000 45500 50800 10 line
46300 46100 46500 45900 10 line
46500 46100 46300 45900 10 line
46300 48600 46500 48400 10 line
46500 48600 46300 48400 10 line
46300 49400 46500 49200 10 line
46500 49400 46300 49200 10 line
46300 49800 46500 49600 10 line
46500 49800 46300 49600 10 line
46300 51000 46500 50800 10 line
46500 51000 46300 50800 10 line
60 60 48470 50870 fbox
60 60 48470 50470 fbox
60 60 48470 50070 fbox
60 60 48470 49670 fbox
60 60 48470 49270 fbox
60 60 48470 48870 fbox
60 60 48470 48470 fbox
60 60 48470 48070 fbox
60 60 43970 51170 fbox
60 60 44770 51170 fbox
60 60 45570 51170 fbox
60 60 46370 51170 fbox
60 60 47170 51170 fbox
60 60 47970 51170 fbox
60 60 47970 43970 fbox
60 60 47170 43970 fbox
60 60 46370 43970 fbox
60 60 45570 43970 fbox
60 60 44770 43970 fbox
60 60 43970 43970 fbox
60 60 43670 45970 fbox
60 60 43670 45170 fbox
60 60 43670 44370 fbox
60 60 42170 50670 fbox
60 60 42170 49870 fbox
60 60 42170 49070 fbox
60 60 42170 48270 fbox
60 60 49970 45970 fbox
60 60 49970 45170 fbox
60 60 49970 44370 fbox
showpage
%%End
