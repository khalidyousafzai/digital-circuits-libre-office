%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Wed Aug  8 14:05:29 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figChapter7/figRAMfourWordWithAddressDecoding.sch
%%Author: (null)
%%BoundingBox: 0 0 1303 1008
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-37300 -37800 translate
gsave
41900 46800 42700 46800 10 line
42700 46800 42700 47600 10 line
42700 47600 41900 47600 10 line
41900 47600 41900 46800 10 line
42300 47900 42300 47600 10 line
41600 47200 41900 47200 10 line
42300 46500 42300 46800 10 line
43000 47200 42700 47200 10 line
grestore
gsave
45600 46800 46400 46800 10 line
46400 46800 46400 47600 10 line
46400 47600 45600 47600 10 line
45600 47600 45600 46800 10 line
46000 47900 46000 47600 10 line
45300 47200 45600 47200 10 line
46000 46500 46000 46800 10 line
46700 47200 46400 47200 10 line
grestore
gsave
53100 46800 53900 46800 10 line
53900 46800 53900 47600 10 line
53900 47600 53100 47600 10 line
53100 47600 53100 46800 10 line
53500 47900 53500 47600 10 line
52800 47200 53100 47200 10 line
53500 46500 53500 46800 10 line
54200 47200 53900 47200 10 line
grestore
gsave
49300 46800 50100 46800 10 line
50100 46800 50100 47600 10 line
50100 47600 49300 47600 10 line
49300 47600 49300 46800 10 line
49700 47900 49700 47600 10 line
49000 47200 49300 47200 10 line
49700 46500 49700 46800 10 line
50400 47200 50100 47200 10 line
grestore
53500 47900 53500 48000 10 line
40400 48000 53500 48000 10 line
42300 47900 42300 48000 10 line
46000 47900 46000 48000 10 line
49700 47900 49700 48000 10 line
53500 46500 53500 46400 10 line
53500 46400 41200 46400 10 line
42300 46500 42300 46400 10 line
46000 46500 46000 46400 10 line
49700 46500 49700 46400 10 line
52800 47200 52700 47200 10 line
52700 41600 52700 51000 10 line
gsave
false false false false 260.000000 [(Z0) ] 0 52600 51100 180.555557 text
grestore
49000 47200 48900 47200 10 line
48900 41600 48900 51000 10 line
gsave
false false false false 260.000000 [(Z1) ] 0 48800 51100 180.555557 text
grestore
45300 47200 45200 47200 10 line
45200 41600 45200 51000 10 line
gsave
false false false false 260.000000 [(Z2) ] 0 45100 51100 180.555557 text
grestore
41600 47200 41500 47200 10 line
41500 41600 41500 51000 10 line
gsave
false false false false 260.000000 [(Z3) ] 0 41400 51100 180.555557 text
grestore
43000 47200 43100 47200 10 line
46700 47200 46800 47200 10 line
50400 47200 50600 47200 10 line
54200 47200 54300 47200 10 line
gsave
41900 43800 42700 43800 10 line
42700 43800 42700 44600 10 line
42700 44600 41900 44600 10 line
41900 44600 41900 43800 10 line
42300 44900 42300 44600 10 line
41600 44200 41900 44200 10 line
42300 43500 42300 43800 10 line
43000 44200 42700 44200 10 line
grestore
gsave
45600 43800 46400 43800 10 line
46400 43800 46400 44600 10 line
46400 44600 45600 44600 10 line
45600 44600 45600 43800 10 line
46000 44900 46000 44600 10 line
45300 44200 45600 44200 10 line
46000 43500 46000 43800 10 line
46700 44200 46400 44200 10 line
grestore
gsave
53100 43800 53900 43800 10 line
53900 43800 53900 44600 10 line
53900 44600 53100 44600 10 line
53100 44600 53100 43800 10 line
53500 44900 53500 44600 10 line
52800 44200 53100 44200 10 line
53500 43500 53500 43800 10 line
54200 44200 53900 44200 10 line
grestore
gsave
49300 43800 50100 43800 10 line
50100 43800 50100 44600 10 line
50100 44600 49300 44600 10 line
49300 44600 49300 43800 10 line
49700 44900 49700 44600 10 line
49000 44200 49300 44200 10 line
49700 43500 49700 43800 10 line
50400 44200 50100 44200 10 line
grestore
53500 44900 53500 45000 10 line
40400 45000 53500 45000 10 line
42300 44900 42300 45000 10 line
46000 44900 46000 45000 10 line
49700 44900 49700 45000 10 line
53500 43500 53500 43400 10 line
53500 43400 41200 43400 10 line
42300 43500 42300 43400 10 line
46000 43500 46000 43400 10 line
49700 43500 49700 43400 10 line
52800 44200 52700 44200 10 line
49000 44200 48900 44200 10 line
45300 44200 45200 44200 10 line
41600 44200 41500 44200 10 line
43000 44200 43100 44200 10 line
46700 44200 46800 44200 10 line
50400 44200 50600 44200 10 line
54200 44200 54300 44200 10 line
gsave
41900 41200 42700 41200 10 line
42700 41200 42700 42000 10 line
42700 42000 41900 42000 10 line
41900 42000 41900 41200 10 line
42300 42300 42300 42000 10 line
41600 41600 41900 41600 10 line
42300 40900 42300 41200 10 line
43000 41600 42700 41600 10 line
newpath
42300 40900
25
0 360 arc
fill
newpath
42300 40900
25
0 360 arc
fill
grestore
gsave
45600 41200 46400 41200 10 line
46400 41200 46400 42000 10 line
46400 42000 45600 42000 10 line
45600 42000 45600 41200 10 line
46000 42300 46000 42000 10 line
45300 41600 45600 41600 10 line
46000 40900 46000 41200 10 line
46700 41600 46400 41600 10 line
newpath
46000 40900
25
0 360 arc
fill
newpath
46000 40900
25
0 360 arc
fill
grestore
gsave
53100 41200 53900 41200 10 line
53900 41200 53900 42000 10 line
53900 42000 53100 42000 10 line
53100 42000 53100 41200 10 line
53500 42300 53500 42000 10 line
52800 41600 53100 41600 10 line
53500 40900 53500 41200 10 line
54200 41600 53900 41600 10 line
grestore
gsave
49300 41200 50100 41200 10 line
50100 41200 50100 42000 10 line
50100 42000 49300 42000 10 line
49300 42000 49300 41200 10 line
49700 42300 49700 42000 10 line
49000 41600 49300 41600 10 line
49700 40900 49700 41200 10 line
50400 41600 50100 41600 10 line
newpath
49700 40900
25
0 360 arc
fill
newpath
49700 40900
25
0 360 arc
fill
grestore
53500 42300 53500 42400 10 line
40100 42400 53500 42400 10 line
42300 42300 42300 42400 10 line
46000 42300 46000 42400 10 line
49700 42300 49700 42400 10 line
40300 40900 53500 40900 10 line
52800 41600 52700 41600 10 line
49000 41600 48900 41600 10 line
45300 41600 45200 41600 10 line
41600 41600 41500 41600 10 line
43000 41600 43100 41600 10 line
43100 40200 43100 49900 10 line
46700 41600 46800 41600 10 line
46800 40200 46800 49900 10 line
50400 41600 50600 41600 10 line
50600 40200 50600 49900 10 line
54200 41600 54300 41600 10 line
54300 40200 54300 49900 10 line
gsave
41900 49500 42700 49500 10 line
42700 49500 42700 50300 10 line
42700 50300 41900 50300 10 line
41900 50300 41900 49500 10 line
42300 50600 42300 50300 10 line
41600 49900 41900 49900 10 line
42300 49200 42300 49500 10 line
43000 49900 42700 49900 10 line
grestore
gsave
45600 49500 46400 49500 10 line
46400 49500 46400 50300 10 line
46400 50300 45600 50300 10 line
45600 50300 45600 49500 10 line
46000 50600 46000 50300 10 line
45300 49900 45600 49900 10 line
46000 49200 46000 49500 10 line
46700 49900 46400 49900 10 line
grestore
gsave
53100 49500 53900 49500 10 line
53900 49500 53900 50300 10 line
53900 50300 53100 50300 10 line
53100 50300 53100 49500 10 line
53500 50600 53500 50300 10 line
52800 49900 53100 49900 10 line
53500 49200 53500 49500 10 line
54200 49900 53900 49900 10 line
grestore
gsave
49300 49500 50100 49500 10 line
50100 49500 50100 50300 10 line
50100 50300 49300 50300 10 line
49300 50300 49300 49500 10 line
49700 50600 49700 50300 10 line
49000 49900 49300 49900 10 line
49700 49200 49700 49500 10 line
50400 49900 50100 49900 10 line
grestore
53500 50600 53500 50700 10 line
40100 50700 53500 50700 10 line
42300 50600 42300 50700 10 line
46000 50600 46000 50700 10 line
49700 50600 49700 50700 10 line
53500 49200 53500 49100 10 line
53500 49100 41200 49100 10 line
42300 49200 42300 49100 10 line
46000 49200 46000 49100 10 line
49700 49200 49700 49100 10 line
52800 49900 52700 49900 10 line
49000 49900 48900 49900 10 line
45300 49900 45200 49900 10 line
41600 49900 41500 49900 10 line
43000 49900 43100 49900 10 line
46700 49900 46800 49900 10 line
50400 49900 50600 49900 10 line
54200 49900 54300 49900 10 line
54300 39000 54300 38700 10 line
gsave
false false false false 260.000000 [(D0) ] 0 54200 38400 180.555557 text
grestore
50600 39000 50600 38700 10 line
gsave
false false false false 260.000000 [(D1) ] 0 50500 38400 180.555557 text
grestore
46800 39000 46800 38700 10 line
gsave
false false false false 260.000000 [(D2) ] 0 46700 38400 180.555557 text
grestore
43100 39000 43100 38700 10 line
gsave
false false false false 260.000000 [(D3) ] 0 43000 38400 180.555557 text
grestore
41200 49100 41200 40900 10 line
37300 37800 55400 37800 10 line
55400 37800 55400 51800 10 line
55400 51800 37300 51800 10 line
37300 51800 37300 37800 10 line
gsave
42800 39935 42800 39600 10 line
43400 39935 43400 39600 10 line
43100 40200 400 222 318 10 darc
43200 39600 400 180 256 10 darc
43000 39600 400 284 360 10 darc
43100 39800 43100 40200 10 line
43100 39000 43100 39212 10 line
grestore
gsave
46500 39935 46500 39600 10 line
47100 39935 47100 39600 10 line
46800 40200 400 222 318 10 darc
46900 39600 400 180 256 10 darc
46700 39600 400 284 360 10 darc
46800 39800 46800 40200 10 line
46800 39000 46800 39212 10 line
grestore
gsave
50300 39935 50300 39600 10 line
50900 39935 50900 39600 10 line
50600 40200 400 222 318 10 darc
50700 39600 400 180 256 10 darc
50500 39600 400 284 360 10 darc
50600 39800 50600 40200 10 line
50600 39000 50600 39212 10 line
grestore
gsave
54000 39935 54000 39600 10 line
54600 39935 54600 39600 10 line
54300 40200 400 222 318 10 darc
54400 39600 400 180 256 10 darc
54200 39600 400 284 360 10 darc
54300 39800 54300 40200 10 line
54300 39000 54300 39212 10 line
grestore
gsave
38900 45900 39700 45900 10 line
39700 45900 39700 47300 10 line
39700 47300 38900 47300 10 line
38900 47300 38900 45900 10 line
38600 46800 38900 46800 10 line
38600 46500 38900 46500 10 line
40000 47100 39700 47100 10 line
40000 46800 39700 46800 10 line
40000 46500 39700 46500 10 line
40000 46200 39700 46200 10 line
38600 46100 38900 46100 10 line
gsave
false false false false 260.000000 [(a1) ] 0 38955 46795 180.555557 text
grestore
gsave
false false false false 260.000000 [(a0) ] 0 38955 46495 180.555557 text
grestore
gsave
false true false false 260.000000 [(y3) ] 0 39645 47095 180.555557 text
grestore
gsave
false true false false 260.000000 [(y2) ] 0 39645 46795 180.555557 text
grestore
gsave
false true false false 260.000000 [(y1) ] 0 39645 46495 180.555557 text
grestore
gsave
false true false false 260.000000 [(y0) ] 0 39645 46195 180.555557 text
grestore
gsave
false false false false 260.000000 [(e) ] 0 38955 46095 180.555557 text
grestore
grestore
40100 50700 40100 47100 10 line
40100 47100 40000 47100 10 line
40400 46800 40400 48000 10 line
40400 46800 40000 46800 10 line
40400 45000 40400 46500 10 line
40400 46500 40000 46500 10 line
40100 42400 40100 46200 10 line
40100 46200 40000 46200 10 line
38300 46800 38600 46800 10 line
38300 46500 38600 46500 10 line
38300 46100 38600 46100 10 line
gsave
false false false false 260.000000 [(A1) ] 0 38000 46800 180.555557 text
grestore
gsave
false false false false 260.000000 [(A0) ] 0 38000 46500 180.555557 text
grestore
54500 40400 54100 40200 10 line
50800 40400 50400 40200 10 line
47000 40400 46600 40200 10 line
43300 40400 42900 40200 10 line
gsave
false false false false 364.000000 [(4) ] 0 43400 40300 252.777771 text
grestore
gsave
false false false false 364.000000 [(4) ] 0 47100 40300 252.777771 text
grestore
gsave
false false false false 364.000000 [(4) ] 0 50900 40300 252.777771 text
grestore
gsave
false false false false 364.000000 [(4) ] 0 54600 40300 252.777771 text
grestore
newpath
42300 48000
25
0 360 arc
fill
newpath
46000 48000
25
0 360 arc
fill
newpath
49700 48000
25
0 360 arc
fill
newpath
42300 48000
25
0 360 arc
fill
newpath
42300 48000
25
0 360 arc
fill
newpath
46000 48000
25
0 360 arc
fill
newpath
46000 48000
25
0 360 arc
fill
newpath
49700 48000
25
0 360 arc
fill
newpath
49700 48000
25
0 360 arc
fill
newpath
41200 46400
25
0 360 arc
fill
newpath
42300 46400
25
0 360 arc
fill
newpath
46000 46400
25
0 360 arc
fill
newpath
49700 46400
25
0 360 arc
fill
newpath
41200 46400
25
0 360 arc
fill
newpath
42300 46400
25
0 360 arc
fill
newpath
42300 46400
25
0 360 arc
fill
newpath
46000 46400
25
0 360 arc
fill
newpath
46000 46400
25
0 360 arc
fill
newpath
49700 46400
25
0 360 arc
fill
newpath
49700 46400
25
0 360 arc
fill
newpath
52700 47200
25
0 360 arc
fill
newpath
52700 47200
25
0 360 arc
fill
60 60 52670 50970 fbox
newpath
52700 47200
25
0 360 arc
fill
newpath
52700 44200
25
0 360 arc
fill
newpath
52700 49900
25
0 360 arc
fill
newpath
48900 47200
25
0 360 arc
fill
newpath
48900 47200
25
0 360 arc
fill
60 60 48870 50970 fbox
newpath
48900 47200
25
0 360 arc
fill
newpath
48900 44200
25
0 360 arc
fill
newpath
48900 49900
25
0 360 arc
fill
newpath
45200 47200
25
0 360 arc
fill
newpath
45200 47200
25
0 360 arc
fill
60 60 45170 50970 fbox
newpath
45200 47200
25
0 360 arc
fill
newpath
45200 44200
25
0 360 arc
fill
newpath
45200 49900
25
0 360 arc
fill
newpath
41500 47200
25
0 360 arc
fill
newpath
41500 47200
25
0 360 arc
fill
60 60 41470 50970 fbox
newpath
41500 47200
25
0 360 arc
fill
newpath
41500 44200
25
0 360 arc
fill
newpath
41500 49900
25
0 360 arc
fill
newpath
43100 47200
25
0 360 arc
fill
newpath
43100 47200
25
0 360 arc
fill
newpath
46800 47200
25
0 360 arc
fill
newpath
46800 47200
25
0 360 arc
fill
newpath
50600 47200
25
0 360 arc
fill
newpath
50600 47200
25
0 360 arc
fill
newpath
54300 47200
25
0 360 arc
fill
newpath
54300 47200
25
0 360 arc
fill
newpath
42300 45000
25
0 360 arc
fill
newpath
46000 45000
25
0 360 arc
fill
newpath
49700 45000
25
0 360 arc
fill
newpath
42300 45000
25
0 360 arc
fill
newpath
42300 45000
25
0 360 arc
fill
newpath
46000 45000
25
0 360 arc
fill
newpath
46000 45000
25
0 360 arc
fill
newpath
49700 45000
25
0 360 arc
fill
newpath
49700 45000
25
0 360 arc
fill
newpath
41200 43400
25
0 360 arc
fill
newpath
42300 43400
25
0 360 arc
fill
newpath
46000 43400
25
0 360 arc
fill
newpath
49700 43400
25
0 360 arc
fill
newpath
41200 43400
25
0 360 arc
fill
newpath
42300 43400
25
0 360 arc
fill
newpath
42300 43400
25
0 360 arc
fill
newpath
46000 43400
25
0 360 arc
fill
newpath
46000 43400
25
0 360 arc
fill
newpath
49700 43400
25
0 360 arc
fill
newpath
49700 43400
25
0 360 arc
fill
newpath
52700 44200
25
0 360 arc
fill
newpath
52700 44200
25
0 360 arc
fill
newpath
48900 44200
25
0 360 arc
fill
newpath
48900 44200
25
0 360 arc
fill
newpath
45200 44200
25
0 360 arc
fill
newpath
45200 44200
25
0 360 arc
fill
newpath
41500 44200
25
0 360 arc
fill
newpath
41500 44200
25
0 360 arc
fill
newpath
43100 44200
25
0 360 arc
fill
newpath
43100 44200
25
0 360 arc
fill
newpath
46800 44200
25
0 360 arc
fill
newpath
46800 44200
25
0 360 arc
fill
newpath
50600 44200
25
0 360 arc
fill
newpath
50600 44200
25
0 360 arc
fill
newpath
54300 44200
25
0 360 arc
fill
newpath
54300 44200
25
0 360 arc
fill
newpath
42300 40900
25
0 360 arc
fill
newpath
42300 40900
25
0 360 arc
fill
newpath
46000 40900
25
0 360 arc
fill
newpath
46000 40900
25
0 360 arc
fill
newpath
49700 40900
25
0 360 arc
fill
newpath
49700 40900
25
0 360 arc
fill
newpath
42300 42400
25
0 360 arc
fill
newpath
46000 42400
25
0 360 arc
fill
newpath
49700 42400
25
0 360 arc
fill
newpath
42300 42400
25
0 360 arc
fill
newpath
42300 42400
25
0 360 arc
fill
newpath
46000 42400
25
0 360 arc
fill
newpath
46000 42400
25
0 360 arc
fill
newpath
49700 42400
25
0 360 arc
fill
newpath
49700 42400
25
0 360 arc
fill
60 60 40270 40870 fbox
newpath
42300 40900
25
0 360 arc
fill
newpath
46000 40900
25
0 360 arc
fill
newpath
49700 40900
25
0 360 arc
fill
newpath
41200 40900
25
0 360 arc
fill
newpath
43100 41600
25
0 360 arc
fill
newpath
43100 41600
25
0 360 arc
fill
newpath
43100 44200
25
0 360 arc
fill
newpath
43100 41600
25
0 360 arc
fill
newpath
43100 47200
25
0 360 arc
fill
newpath
46800 41600
25
0 360 arc
fill
newpath
46800 41600
25
0 360 arc
fill
newpath
46800 44200
25
0 360 arc
fill
newpath
46800 41600
25
0 360 arc
fill
newpath
46800 47200
25
0 360 arc
fill
newpath
50600 41600
25
0 360 arc
fill
newpath
50600 41600
25
0 360 arc
fill
newpath
50600 44200
25
0 360 arc
fill
newpath
50600 41600
25
0 360 arc
fill
newpath
50600 47200
25
0 360 arc
fill
newpath
54300 41600
25
0 360 arc
fill
newpath
54300 41600
25
0 360 arc
fill
newpath
54300 44200
25
0 360 arc
fill
newpath
54300 41600
25
0 360 arc
fill
newpath
54300 47200
25
0 360 arc
fill
newpath
42300 50700
25
0 360 arc
fill
newpath
46000 50700
25
0 360 arc
fill
newpath
49700 50700
25
0 360 arc
fill
newpath
42300 50700
25
0 360 arc
fill
newpath
42300 50700
25
0 360 arc
fill
newpath
46000 50700
25
0 360 arc
fill
newpath
46000 50700
25
0 360 arc
fill
newpath
49700 50700
25
0 360 arc
fill
newpath
49700 50700
25
0 360 arc
fill
newpath
42300 49100
25
0 360 arc
fill
newpath
46000 49100
25
0 360 arc
fill
newpath
49700 49100
25
0 360 arc
fill
newpath
42300 49100
25
0 360 arc
fill
newpath
42300 49100
25
0 360 arc
fill
newpath
46000 49100
25
0 360 arc
fill
newpath
46000 49100
25
0 360 arc
fill
newpath
49700 49100
25
0 360 arc
fill
newpath
49700 49100
25
0 360 arc
fill
newpath
52700 49900
25
0 360 arc
fill
newpath
52700 49900
25
0 360 arc
fill
newpath
48900 49900
25
0 360 arc
fill
newpath
48900 49900
25
0 360 arc
fill
newpath
45200 49900
25
0 360 arc
fill
newpath
45200 49900
25
0 360 arc
fill
newpath
41500 49900
25
0 360 arc
fill
newpath
41500 49900
25
0 360 arc
fill
60 60 54270 38670 fbox
60 60 50570 38670 fbox
60 60 46770 38670 fbox
60 60 43070 38670 fbox
newpath
41200 40900
25
0 360 arc
fill
newpath
41200 43400
25
0 360 arc
fill
newpath
41200 40900
25
0 360 arc
fill
newpath
41200 46400
25
0 360 arc
fill
60 60 38270 46770 fbox
60 60 38270 46470 fbox
60 60 38270 46070 fbox
showpage
%%End
