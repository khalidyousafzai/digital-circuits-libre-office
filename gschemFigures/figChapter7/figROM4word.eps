%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Fri Aug 10 12:20:53 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figChapter7/figROM4word.sch
%%Author: (null)
%%BoundingBox: 0 0 1108 295
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-42300 -44700 translate
gsave
44200 47100 45000 47100 10 line
45000 47100 45000 48600 10 line
45000 48600 44200 48600 10 line
44200 48600 44200 47100 10 line
43900 48000 44200 48000 10 line
gsave
false false false false 260.000000 [(a1) ] 0 44255 47995 180.555557 text
grestore
43900 47700 44200 47700 10 line
gsave
false false false false 260.000000 [(a0) ] 0 44255 47695 180.555557 text
grestore
45300 48300 45000 48300 10 line
gsave
false true false false 260.000000 [(y3) ] 0 44945 48295 180.555557 text
grestore
45300 48000 45000 48000 10 line
gsave
false true false false 260.000000 [(y2) ] 0 44945 47995 180.555557 text
grestore
45300 47700 45000 47700 10 line
gsave
false true false false 260.000000 [(y1) ] 0 44945 47695 180.555557 text
grestore
45300 47400 45000 47400 10 line
gsave
false true false false 260.000000 [(y0) ] 0 44945 47395 180.555557 text
grestore
43900 47300 44200 47300 10 line
gsave
false false false false 260.000000 [(e) ] 0 44255 47295 180.555557 text
grestore
grestore
gsave
45500 46500 45500 46800 10 line
46500 46500 46500 46800 10 line
46200 46500 46200 46800 10 line
46000 46764 400 222 319 10 darc
45700 46500 45700 46200 10 line
46300 46500 46300 46200 10 line
46100 46200 400 180 256 10 darc
45900 46200 400 284 360 10 darc
45500 46500 45700 46500 10 line
46500 46500 46300 46500 10 line
45800 46500 45800 46800 10 line
46500 46500 46600 46500 10 line
45400 46500 45500 46500 10 line
46000 45500 46000 45800 10 line
grestore
45300 48300 56600 48300 10 line
45300 48000 56600 48000 10 line
45300 47700 56600 47700 10 line
45300 47400 56600 47400 10 line
45500 46800 45500 48300 10 line
45800 46800 45800 48000 10 line
46200 46800 46200 47700 10 line
46500 46800 46500 47400 10 line
gsave
46900 46500 46900 46800 10 line
47900 46500 47900 46800 10 line
47600 46500 47600 46800 10 line
47400 46764 400 222 319 10 darc
47100 46500 47100 46200 10 line
47700 46500 47700 46200 10 line
47500 46200 400 180 256 10 darc
47300 46200 400 284 360 10 darc
46900 46500 47100 46500 10 line
47900 46500 47700 46500 10 line
47200 46500 47200 46800 10 line
47900 46500 48000 46500 10 line
46800 46500 46900 46500 10 line
47400 45500 47400 45800 10 line
grestore
46900 46800 46900 48300 10 line
47200 46800 47200 48000 10 line
47600 46800 47600 47700 10 line
47900 46800 47900 47400 10 line
gsave
48300 46500 48300 46800 10 line
49300 46500 49300 46800 10 line
49000 46500 49000 46800 10 line
48800 46764 400 222 319 10 darc
48500 46500 48500 46200 10 line
49100 46500 49100 46200 10 line
48900 46200 400 180 256 10 darc
48700 46200 400 284 360 10 darc
48300 46500 48500 46500 10 line
49300 46500 49100 46500 10 line
48600 46500 48600 46800 10 line
49300 46500 49400 46500 10 line
48200 46500 48300 46500 10 line
48800 45500 48800 45800 10 line
grestore
48300 46800 48300 48300 10 line
48600 46800 48600 48000 10 line
49000 46800 49000 47700 10 line
49300 46800 49300 47400 10 line
gsave
49700 46500 49700 46800 10 line
50700 46500 50700 46800 10 line
50400 46500 50400 46800 10 line
50200 46764 400 222 319 10 darc
49900 46500 49900 46200 10 line
50500 46500 50500 46200 10 line
50300 46200 400 180 256 10 darc
50100 46200 400 284 360 10 darc
49700 46500 49900 46500 10 line
50700 46500 50500 46500 10 line
50000 46500 50000 46800 10 line
50700 46500 50800 46500 10 line
49600 46500 49700 46500 10 line
50200 45500 50200 45800 10 line
grestore
49700 46800 49700 48300 10 line
50000 46800 50000 48000 10 line
50400 46800 50400 47700 10 line
50700 46800 50700 47400 10 line
gsave
51100 46500 51100 46800 10 line
52100 46500 52100 46800 10 line
51800 46500 51800 46800 10 line
51600 46764 400 222 319 10 darc
51300 46500 51300 46200 10 line
51900 46500 51900 46200 10 line
51700 46200 400 180 256 10 darc
51500 46200 400 284 360 10 darc
51100 46500 51300 46500 10 line
52100 46500 51900 46500 10 line
51400 46500 51400 46800 10 line
52100 46500 52200 46500 10 line
51000 46500 51100 46500 10 line
51600 45500 51600 45800 10 line
grestore
51100 46800 51100 48300 10 line
51400 46800 51400 48000 10 line
51800 46800 51800 47700 10 line
52100 46800 52100 47400 10 line
gsave
52500 46500 52500 46800 10 line
53500 46500 53500 46800 10 line
53200 46500 53200 46800 10 line
53000 46764 400 222 319 10 darc
52700 46500 52700 46200 10 line
53300 46500 53300 46200 10 line
53100 46200 400 180 256 10 darc
52900 46200 400 284 360 10 darc
52500 46500 52700 46500 10 line
53500 46500 53300 46500 10 line
52800 46500 52800 46800 10 line
53500 46500 53600 46500 10 line
52400 46500 52500 46500 10 line
53000 45500 53000 45800 10 line
grestore
52500 46800 52500 48300 10 line
52800 46800 52800 48000 10 line
53200 46800 53200 47700 10 line
53500 46800 53500 47400 10 line
gsave
53900 46500 53900 46800 10 line
54900 46500 54900 46800 10 line
54600 46500 54600 46800 10 line
54400 46764 400 222 319 10 darc
54100 46500 54100 46200 10 line
54700 46500 54700 46200 10 line
54500 46200 400 180 256 10 darc
54300 46200 400 284 360 10 darc
53900 46500 54100 46500 10 line
54900 46500 54700 46500 10 line
54200 46500 54200 46800 10 line
54900 46500 55000 46500 10 line
53800 46500 53900 46500 10 line
54400 45500 54400 45800 10 line
grestore
53900 46800 53900 48300 10 line
54200 46800 54200 48000 10 line
54600 46800 54600 47700 10 line
54900 46800 54900 47400 10 line
gsave
55300 46500 55300 46800 10 line
56300 46500 56300 46800 10 line
56000 46500 56000 46800 10 line
55800 46764 400 222 319 10 darc
55500 46500 55500 46200 10 line
56100 46500 56100 46200 10 line
55900 46200 400 180 256 10 darc
55700 46200 400 284 360 10 darc
55300 46500 55500 46500 10 line
56300 46500 56100 46500 10 line
55600 46500 55600 46800 10 line
56300 46500 56400 46500 10 line
55200 46500 55300 46500 10 line
55800 45500 55800 45800 10 line
grestore
55300 46800 55300 48300 10 line
55600 46800 55600 48000 10 line
56000 46800 56000 47700 10 line
56300 46800 56300 47400 10 line
43500 48000 43900 48000 10 line
gsave
false false false false 260.000000 [(A1) ] 0 43200 47900 180.555557 text
grestore
43500 47700 43900 47700 10 line
gsave
false false false false 260.000000 [(A0) ] 0 43200 47600 180.555557 text
grestore
43500 47300 43900 47300 10 line
46000 45200 46000 45500 10 line
gsave
false false false false 260.000000 [(D7) ] 0 45900 44900 180.555557 text
grestore
47400 45200 47400 45500 10 line
gsave
false false false false 260.000000 [(D6) ] 0 47300 44900 180.555557 text
grestore
48800 45200 48800 45500 10 line
gsave
false false false false 260.000000 [(D5) ] 0 48700 44900 180.555557 text
grestore
50200 45200 50200 45500 10 line
gsave
false false false false 260.000000 [(D4) ] 0 50100 44900 180.555557 text
grestore
51600 45200 51600 45500 10 line
gsave
false false false false 260.000000 [(D3) ] 0 51500 44900 180.555557 text
grestore
53000 45200 53000 45500 10 line
gsave
false false false false 260.000000 [(D2) ] 0 52900 44900 180.555557 text
grestore
54400 45200 54400 45500 10 line
gsave
false false false false 260.000000 [(D1) ] 0 54300 44900 180.555557 text
grestore
55800 45200 55800 45500 10 line
gsave
false false false false 260.000000 [(D0) ] 0 55700 44900 180.555557 text
grestore
42300 44700 57700 44700 10 line
57700 44700 57700 48800 10 line
57700 48800 42300 48800 10 line
42300 48800 42300 44700 10 line
60 60 56570 48270 fbox
newpath
45500 48300
25
0 360 arc
fill
newpath
46900 48300
25
0 360 arc
fill
newpath
48300 48300
25
0 360 arc
fill
newpath
49700 48300
25
0 360 arc
fill
newpath
51100 48300
25
0 360 arc
fill
newpath
52500 48300
25
0 360 arc
fill
newpath
53900 48300
25
0 360 arc
fill
newpath
55300 48300
25
0 360 arc
fill
60 60 56570 47970 fbox
newpath
45800 48000
25
0 360 arc
fill
newpath
47200 48000
25
0 360 arc
fill
newpath
48600 48000
25
0 360 arc
fill
newpath
50000 48000
25
0 360 arc
fill
newpath
51400 48000
25
0 360 arc
fill
newpath
52800 48000
25
0 360 arc
fill
newpath
54200 48000
25
0 360 arc
fill
newpath
55600 48000
25
0 360 arc
fill
60 60 56570 47670 fbox
newpath
46200 47700
25
0 360 arc
fill
newpath
47600 47700
25
0 360 arc
fill
newpath
49000 47700
25
0 360 arc
fill
newpath
50400 47700
25
0 360 arc
fill
newpath
51800 47700
25
0 360 arc
fill
newpath
53200 47700
25
0 360 arc
fill
newpath
54600 47700
25
0 360 arc
fill
newpath
56000 47700
25
0 360 arc
fill
60 60 56570 47370 fbox
newpath
46500 47400
25
0 360 arc
fill
newpath
47900 47400
25
0 360 arc
fill
newpath
49300 47400
25
0 360 arc
fill
newpath
50700 47400
25
0 360 arc
fill
newpath
52100 47400
25
0 360 arc
fill
newpath
53500 47400
25
0 360 arc
fill
newpath
54900 47400
25
0 360 arc
fill
newpath
56300 47400
25
0 360 arc
fill
newpath
45500 48300
25
0 360 arc
fill
newpath
45500 48300
25
0 360 arc
fill
newpath
45800 48000
25
0 360 arc
fill
newpath
45800 48000
25
0 360 arc
fill
newpath
46200 47700
25
0 360 arc
fill
newpath
46200 47700
25
0 360 arc
fill
newpath
46500 47400
25
0 360 arc
fill
newpath
46500 47400
25
0 360 arc
fill
newpath
46900 48300
25
0 360 arc
fill
newpath
46900 48300
25
0 360 arc
fill
newpath
47200 48000
25
0 360 arc
fill
newpath
47200 48000
25
0 360 arc
fill
newpath
47600 47700
25
0 360 arc
fill
newpath
47600 47700
25
0 360 arc
fill
newpath
47900 47400
25
0 360 arc
fill
newpath
47900 47400
25
0 360 arc
fill
newpath
48300 48300
25
0 360 arc
fill
newpath
48300 48300
25
0 360 arc
fill
newpath
48600 48000
25
0 360 arc
fill
newpath
48600 48000
25
0 360 arc
fill
newpath
49000 47700
25
0 360 arc
fill
newpath
49000 47700
25
0 360 arc
fill
newpath
49300 47400
25
0 360 arc
fill
newpath
49300 47400
25
0 360 arc
fill
newpath
49700 48300
25
0 360 arc
fill
newpath
49700 48300
25
0 360 arc
fill
newpath
50000 48000
25
0 360 arc
fill
newpath
50000 48000
25
0 360 arc
fill
newpath
50400 47700
25
0 360 arc
fill
newpath
50400 47700
25
0 360 arc
fill
newpath
50700 47400
25
0 360 arc
fill
newpath
50700 47400
25
0 360 arc
fill
newpath
51100 48300
25
0 360 arc
fill
newpath
51100 48300
25
0 360 arc
fill
newpath
51400 48000
25
0 360 arc
fill
newpath
51400 48000
25
0 360 arc
fill
newpath
51800 47700
25
0 360 arc
fill
newpath
51800 47700
25
0 360 arc
fill
newpath
52100 47400
25
0 360 arc
fill
newpath
52100 47400
25
0 360 arc
fill
newpath
52500 48300
25
0 360 arc
fill
newpath
52500 48300
25
0 360 arc
fill
newpath
52800 48000
25
0 360 arc
fill
newpath
52800 48000
25
0 360 arc
fill
newpath
53200 47700
25
0 360 arc
fill
newpath
53200 47700
25
0 360 arc
fill
newpath
53500 47400
25
0 360 arc
fill
newpath
53500 47400
25
0 360 arc
fill
newpath
53900 48300
25
0 360 arc
fill
newpath
53900 48300
25
0 360 arc
fill
newpath
54200 48000
25
0 360 arc
fill
newpath
54200 48000
25
0 360 arc
fill
newpath
54600 47700
25
0 360 arc
fill
newpath
54600 47700
25
0 360 arc
fill
newpath
54900 47400
25
0 360 arc
fill
newpath
54900 47400
25
0 360 arc
fill
newpath
55300 48300
25
0 360 arc
fill
newpath
55300 48300
25
0 360 arc
fill
newpath
55600 48000
25
0 360 arc
fill
newpath
55600 48000
25
0 360 arc
fill
newpath
56000 47700
25
0 360 arc
fill
newpath
56000 47700
25
0 360 arc
fill
newpath
56300 47400
25
0 360 arc
fill
newpath
56300 47400
25
0 360 arc
fill
60 60 43470 47970 fbox
60 60 43470 47670 fbox
60 60 43470 47270 fbox
60 60 45970 45170 fbox
60 60 47370 45170 fbox
60 60 48770 45170 fbox
60 60 50170 45170 fbox
60 60 51570 45170 fbox
60 60 52970 45170 fbox
60 60 54370 45170 fbox
60 60 55770 45170 fbox
showpage
%%End
