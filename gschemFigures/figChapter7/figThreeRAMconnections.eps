%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Sun Jan 27 14:23:30 2013
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figChapter7/figThreeRAMconnections.sch
%%Author: (null)
%%BoundingBox: 0 0 921 763
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-33100 -45400 translate
gsave
37800 54400 38600 54400 10 line
38600 54400 38600 55900 10 line
38600 55900 37800 55900 10 line
37800 55900 37800 54400 10 line
37500 55300 37800 55300 10 line
gsave
false false false false 260.000000 [(a1) ] 0 37855 55295 180.555557 text
grestore
37500 55000 37800 55000 10 line
gsave
false false false false 260.000000 [(a0) ] 0 37855 54995 180.555557 text
grestore
38900 55600 38700 55600 10 line
gsave
false true false false 260.000000 [(\\_y3\\_) ] 0 38545 55595 180.555557 text
grestore
38900 55300 38700 55300 10 line
gsave
false true false false 260.000000 [(\\_y2\\_) ] 0 38545 55295 180.555557 text
grestore
38900 55000 38700 55000 10 line
gsave
false true false false 260.000000 [(\\_y1\\_) ] 0 38545 54995 180.555557 text
grestore
38900 54700 38700 54700 10 line
gsave
false true false false 260.000000 [(\\_y0\\_) ] 0 38545 54695 180.555557 text
grestore
38650 55600 50 0 360 10 darc
38650 55300 50 0 360 10 darc
38650 55000 50 0 360 10 darc
38650 54700 50 0 360 10 darc
grestore
39400 52500 41000 52500 10 line
41000 47300 40200 47300 10 line
40200 47300 40200 53300 10 line
41000 47600 40400 47600 10 line
40400 47600 40400 53600 10 line
41000 47900 40600 47900 10 line
40600 47900 40600 53900 10 line
41000 48200 40800 48200 10 line
40800 48200 40800 54200 10 line
42600 54800 44700 54800 10 line
42900 54800 42900 48800 10 line
42900 48800 42600 48800 10 line
42600 54500 44700 54500 10 line
43100 54500 43100 48500 10 line
43100 48500 42600 48500 10 line
42600 54200 44700 54200 10 line
43300 48200 43300 54200 10 line
43300 48200 42600 48200 10 line
42600 53900 44700 53900 10 line
43500 53900 43500 47900 10 line
43500 47900 42600 47900 10 line
42600 53600 44700 53600 10 line
43700 53600 43700 47600 10 line
43700 47600 42600 47600 10 line
42600 53300 44700 53300 10 line
43900 47300 43900 53300 10 line
43900 47300 42600 47300 10 line
42600 53000 44700 53000 10 line
44100 53000 44100 47000 10 line
44100 47000 42600 47000 10 line
42600 52700 44700 52700 10 line
44300 52700 44300 46700 10 line
44300 46700 42600 46700 10 line
41000 50300 40200 50300 10 line
41000 50600 40400 50600 10 line
41000 50900 40600 50900 10 line
41000 51200 40800 51200 10 line
41000 46800 39900 46800 10 line
39900 46800 39900 52800 10 line
41000 49800 39900 49800 10 line
gsave
41300 52300 42300 52300 10 line
42300 52300 42300 55100 10 line
42300 55100 41300 55100 10 line
41300 55100 41300 52300 10 line
42600 53600 42300 53600 10 line
gsave
false false false false 260.000000 [(I/O3) ] 0 41950 53600 180.555557 text
grestore
42600 53300 42300 53300 10 line
gsave
false false false false 260.000000 [(I/O2) ] 0 41950 53300 180.555557 text
grestore
42600 53000 42300 53000 10 line
gsave
false false false false 260.000000 [(I/O1) ] 0 41950 53000 180.555557 text
grestore
42600 52700 42300 52700 10 line
gsave
false false false false 260.000000 [(I/O0) ] 0 41950 52700 180.555557 text
grestore
41000 53600 41300 53600 10 line
gsave
false false false false 260.000000 [(A1) ] 0 41350 53600 180.555557 text
grestore
41000 53300 41300 53300 10 line
gsave
false false false false 260.000000 [(A0) ] 0 41350 53300 180.555557 text
grestore
41000 52800 41200 52800 10 line
41000 52500 41200 52500 10 line
41250 52800 50 0 360 10 darc
41250 52500 50 0 360 10 darc
42600 54800 42300 54800 10 line
gsave
false false false false 260.000000 [(I/O7) ] 0 41950 54800 180.555557 text
grestore
42600 54500 42300 54500 10 line
gsave
false false false false 260.000000 [(I/O6) ] 0 41950 54500 180.555557 text
grestore
42600 54200 42300 54200 10 line
gsave
false false false false 260.000000 [(I/O5) ] 0 41950 54200 180.555557 text
grestore
42600 53900 42300 53900 10 line
gsave
false false false false 260.000000 [(I/O4) ] 0 41950 53900 180.555557 text
grestore
41000 54200 41300 54200 10 line
gsave
false false false false 260.000000 [(A3) ] 0 41350 54200 180.555557 text
grestore
41000 53900 41300 53900 10 line
gsave
false false false false 260.000000 [(A2) ] 0 41350 53900 180.555557 text
grestore
grestore
gsave
41300 49300 42300 49300 10 line
42300 49300 42300 52100 10 line
42300 52100 41300 52100 10 line
41300 52100 41300 49300 10 line
42600 50600 42300 50600 10 line
gsave
false false false false 260.000000 [(I/O3) ] 0 41950 50600 180.555557 text
grestore
42600 50300 42300 50300 10 line
gsave
false false false false 260.000000 [(I/O2) ] 0 41950 50300 180.555557 text
grestore
42600 50000 42300 50000 10 line
gsave
false false false false 260.000000 [(I/O1) ] 0 41950 50000 180.555557 text
grestore
42600 49700 42300 49700 10 line
gsave
false false false false 260.000000 [(I/O0) ] 0 41950 49700 180.555557 text
grestore
41000 50600 41300 50600 10 line
gsave
false false false false 260.000000 [(A1) ] 0 41350 50600 180.555557 text
grestore
41000 50300 41300 50300 10 line
gsave
false false false false 260.000000 [(A0) ] 0 41350 50300 180.555557 text
grestore
41000 49800 41200 49800 10 line
41000 49500 41200 49500 10 line
41250 49800 50 0 360 10 darc
41250 49500 50 0 360 10 darc
42600 51800 42300 51800 10 line
gsave
false false false false 260.000000 [(I/O7) ] 0 41950 51800 180.555557 text
grestore
42600 51500 42300 51500 10 line
gsave
false false false false 260.000000 [(I/O6) ] 0 41950 51500 180.555557 text
grestore
42600 51200 42300 51200 10 line
gsave
false false false false 260.000000 [(I/O5) ] 0 41950 51200 180.555557 text
grestore
42600 50900 42300 50900 10 line
gsave
false false false false 260.000000 [(I/O4) ] 0 41950 50900 180.555557 text
grestore
41000 51200 41300 51200 10 line
gsave
false false false false 260.000000 [(A3) ] 0 41350 51200 180.555557 text
grestore
41000 50900 41300 50900 10 line
gsave
false false false false 260.000000 [(A2) ] 0 41350 50900 180.555557 text
grestore
grestore
gsave
41300 46300 42300 46300 10 line
42300 46300 42300 49100 10 line
42300 49100 41300 49100 10 line
41300 49100 41300 46300 10 line
42600 47600 42300 47600 10 line
gsave
false false false false 260.000000 [(I/O3) ] 0 41950 47600 180.555557 text
grestore
42600 47300 42300 47300 10 line
gsave
false false false false 260.000000 [(I/O2) ] 0 41950 47300 180.555557 text
grestore
42600 47000 42300 47000 10 line
gsave
false false false false 260.000000 [(I/O1) ] 0 41950 47000 180.555557 text
grestore
42600 46700 42300 46700 10 line
gsave
false false false false 260.000000 [(I/O0) ] 0 41950 46700 180.555557 text
grestore
41000 47600 41300 47600 10 line
gsave
false false false false 260.000000 [(A1) ] 0 41350 47600 180.555557 text
grestore
41000 47300 41300 47300 10 line
gsave
false false false false 260.000000 [(A0) ] 0 41350 47300 180.555557 text
grestore
41000 46800 41200 46800 10 line
41000 46500 41200 46500 10 line
41250 46800 50 0 360 10 darc
41250 46500 50 0 360 10 darc
42600 48800 42300 48800 10 line
gsave
false false false false 260.000000 [(I/O7) ] 0 41950 48800 180.555557 text
grestore
42600 48500 42300 48500 10 line
gsave
false false false false 260.000000 [(I/O6) ] 0 41950 48500 180.555557 text
grestore
42600 48200 42300 48200 10 line
gsave
false false false false 260.000000 [(I/O5) ] 0 41950 48200 180.555557 text
grestore
42600 47900 42300 47900 10 line
gsave
false false false false 260.000000 [(I/O4) ] 0 41950 47900 180.555557 text
grestore
41000 48200 41300 48200 10 line
gsave
false false false false 260.000000 [(A3) ] 0 41350 48200 180.555557 text
grestore
41000 47900 41300 47900 10 line
gsave
false false false false 260.000000 [(A2) ] 0 41350 47900 180.555557 text
grestore
grestore
37200 54200 41000 54200 10 line
37200 53900 41000 53900 10 line
37200 53600 41000 53600 10 line
37200 53300 41000 53300 10 line
37200 52800 41000 52800 10 line
37500 55300 37200 55300 10 line
37500 55000 37200 55000 10 line
38900 54700 39000 54700 10 line
39000 54700 39000 46500 10 line
39000 46500 41000 46500 10 line
41000 49500 39200 49500 10 line
39200 49500 39200 55000 10 line
39200 55000 38900 55000 10 line
39400 52500 39400 55600 10 line
39400 55600 38900 55600 10 line
35100 49200 36000 49200 10 line
36000 49200 36000 50800 10 line
36000 50800 35100 50800 10 line
35100 50800 35100 49200 10 line
35100 50700 36000 50700 10 line
35100 50600 36000 50600 10 line
35100 50500 36000 50500 10 line
35100 50400 36000 50400 10 line
35100 50300 36000 50300 10 line
35100 50200 36000 50200 10 line
35100 50100 36000 50100 10 line
35100 50000 36000 50000 10 line
35100 49900 36000 49900 10 line
35100 49800 36000 49800 10 line
35100 49700 36000 49700 10 line
35100 49600 36000 49600 10 line
35100 49500 36000 49500 10 line
35100 49400 36000 49400 10 line
35100 49300 36000 49300 10 line
35100 47400 36000 47400 10 line
36000 47400 36000 49000 10 line
36000 49000 35100 49000 10 line
35100 49000 35100 47400 10 line
35100 48900 36000 48900 10 line
35100 48800 36000 48800 10 line
35100 48700 36000 48700 10 line
35100 48600 36000 48600 10 line
35100 48500 36000 48500 10 line
35100 48400 36000 48400 10 line
35100 48300 36000 48300 10 line
35100 48200 36000 48200 10 line
35100 48100 36000 48100 10 line
35100 48000 36000 48000 10 line
35100 47900 36000 47900 10 line
35100 47800 36000 47800 10 line
35100 47700 36000 47700 10 line
35100 47600 36000 47600 10 line
35100 47500 36000 47500 10 line
35100 45600 36000 45600 10 line
36000 45600 36000 47200 10 line
36000 47200 35100 47200 10 line
35100 47200 35100 45600 10 line
35100 47100 36000 47100 10 line
35100 47000 36000 47000 10 line
35100 46900 36000 46900 10 line
35100 46800 36000 46800 10 line
35100 46700 36000 46700 10 line
35100 46600 36000 46600 10 line
35100 46500 36000 46500 10 line
35100 46400 36000 46400 10 line
35100 46300 36000 46300 10 line
35100 46200 36000 46200 10 line
35100 46100 36000 46100 10 line
35100 46000 36000 46000 10 line
35100 45900 36000 45900 10 line
35100 45800 36000 45800 10 line
35100 45700 36000 45700 10 line
36900 47200 37800 47200 10 line
37800 47200 37800 48800 10 line
37800 48800 36900 48800 10 line
36900 48800 36900 47200 10 line
36900 48700 37800 48700 10 line
36900 48600 37800 48600 10 line
36900 48500 37800 48500 10 line
36900 48400 37800 48400 10 line
36900 48300 37800 48300 10 line
36900 48200 37800 48200 10 line
36900 48100 37800 48100 10 line
36900 48000 37800 48000 10 line
36900 47900 37800 47900 10 line
36900 47800 37800 47800 10 line
36900 47700 37800 47700 10 line
36900 47600 37800 47600 10 line
36900 47500 37800 47500 10 line
36900 47400 37800 47400 10 line
36900 47300 37800 47300 10 line
36900 45600 37800 45600 10 line
37800 45600 37800 47200 10 line
37800 47200 36900 47200 10 line
36900 47200 36900 45600 10 line
36900 47100 37800 47100 10 line
36900 47000 37800 47000 10 line
36900 46900 37800 46900 10 line
36900 46800 37800 46800 10 line
36900 46700 37800 46700 10 line
36900 46600 37800 46600 10 line
36900 46500 37800 46500 10 line
36900 46400 37800 46400 10 line
36900 46300 37800 46300 10 line
36900 46200 37800 46200 10 line
36900 46100 37800 46100 10 line
36900 46000 37800 46000 10 line
36900 45900 37800 45900 10 line
36900 45800 37800 45800 10 line
36900 45700 37800 45700 10 line
36900 50400 37800 50400 10 line
37800 50400 37800 52000 10 line
37800 52000 36900 52000 10 line
36900 52000 36900 50400 10 line
36900 51900 37800 51900 10 line
36900 51800 37800 51800 10 line
36900 51700 37800 51700 10 line
36900 51600 37800 51600 10 line
36900 51500 37800 51500 10 line
36900 51400 37800 51400 10 line
36900 51300 37800 51300 10 line
36900 51200 37800 51200 10 line
36900 51100 37800 51100 10 line
36900 51000 37800 51000 10 line
36900 50900 37800 50900 10 line
36900 50800 37800 50800 10 line
36900 50700 37800 50700 10 line
36900 50600 37800 50600 10 line
36900 50500 37800 50500 10 line
36900 45600 37800 45600 10 line
37800 45600 37800 52000 10 line
37800 52000 36900 52000 10 line
36900 52000 36900 45600 10 line
33100 45400 45900 45400 10 line
45900 45400 45900 56000 10 line
45900 56000 33100 56000 10 line
33100 56000 33100 45400 10 line
newpath
40200 53300
25
0 360 arc
fill
newpath
40200 50300
25
0 360 arc
fill
newpath
40200 53300
25
0 360 arc
fill
newpath
40400 53600
25
0 360 arc
fill
newpath
40400 50600
25
0 360 arc
fill
newpath
40400 53600
25
0 360 arc
fill
newpath
40600 53900
25
0 360 arc
fill
newpath
40600 50900
25
0 360 arc
fill
newpath
40600 53900
25
0 360 arc
fill
newpath
40800 54200
25
0 360 arc
fill
newpath
40800 51200
25
0 360 arc
fill
newpath
40800 54200
25
0 360 arc
fill
60 60 44670 54770 fbox
newpath
42900 54800
25
0 360 arc
fill
newpath
42900 54800
25
0 360 arc
fill
newpath
42900 54800
25
0 360 arc
fill
60 60 44670 54470 fbox
newpath
43100 54500
25
0 360 arc
fill
newpath
43100 54500
25
0 360 arc
fill
newpath
43100 54500
25
0 360 arc
fill
60 60 44670 54170 fbox
newpath
43300 54200
25
0 360 arc
fill
newpath
43300 54200
25
0 360 arc
fill
newpath
43300 54200
25
0 360 arc
fill
60 60 44670 53870 fbox
newpath
43500 53900
25
0 360 arc
fill
newpath
43500 53900
25
0 360 arc
fill
newpath
43500 53900
25
0 360 arc
fill
60 60 44670 53570 fbox
newpath
43700 53600
25
0 360 arc
fill
newpath
43700 53600
25
0 360 arc
fill
newpath
43700 53600
25
0 360 arc
fill
60 60 44670 53270 fbox
newpath
43900 53300
25
0 360 arc
fill
newpath
43900 53300
25
0 360 arc
fill
newpath
43900 53300
25
0 360 arc
fill
60 60 44670 52970 fbox
newpath
44100 53000
25
0 360 arc
fill
newpath
44100 53000
25
0 360 arc
fill
newpath
44100 53000
25
0 360 arc
fill
60 60 44670 52670 fbox
newpath
44300 52700
25
0 360 arc
fill
newpath
44300 52700
25
0 360 arc
fill
newpath
44300 52700
25
0 360 arc
fill
newpath
40200 50300
25
0 360 arc
fill
newpath
40200 50300
25
0 360 arc
fill
newpath
40400 50600
25
0 360 arc
fill
newpath
40400 50600
25
0 360 arc
fill
newpath
40600 50900
25
0 360 arc
fill
newpath
40600 50900
25
0 360 arc
fill
newpath
40800 51200
25
0 360 arc
fill
newpath
40800 51200
25
0 360 arc
fill
newpath
39900 52800
25
0 360 arc
fill
newpath
39900 49800
25
0 360 arc
fill
newpath
39900 52800
25
0 360 arc
fill
newpath
39900 49800
25
0 360 arc
fill
newpath
39900 49800
25
0 360 arc
fill
60 60 37170 54170 fbox
newpath
40800 54200
25
0 360 arc
fill
60 60 37170 53870 fbox
newpath
40600 53900
25
0 360 arc
fill
60 60 37170 53570 fbox
newpath
40400 53600
25
0 360 arc
fill
60 60 37170 53270 fbox
newpath
40200 53300
25
0 360 arc
fill
60 60 37170 52770 fbox
newpath
39900 52800
25
0 360 arc
fill
60 60 37170 55270 fbox
60 60 37170 54970 fbox
showpage
%%End
