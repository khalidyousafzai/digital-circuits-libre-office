%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Fri Jul 27 09:14:19 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figD1ClockGoesHigh.sch
%%Author: (null)
%%BoundingBox: 0 0 493 338
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-48450 -45900 translate
gsave
49800 50300 50100 50300 10 line
49800 49900 50100 49900 10 line
50900 50100 51100 50100 10 line
50100 49800 50100 50400 10 line
50100 50400 50500 50400 10 line
50100 49800 50500 49800 10 line
50500 50100 300 270 450 10 darc
50850 50100 50 0 360 10 darc
grestore
gsave
49800 49300 50100 49300 10 line
49800 48900 50100 48900 10 line
50900 49100 51100 49100 10 line
50100 48800 50100 49400 10 line
50100 49400 50500 49400 10 line
50100 48800 50500 48800 10 line
50500 49100 300 270 450 10 darc
50850 49100 50 0 360 10 darc
grestore
gsave
49800 46800 50100 46800 10 line
49800 46400 50100 46400 10 line
50900 46600 51100 46600 10 line
50100 46300 50100 46900 10 line
50100 46900 50500 46900 10 line
50100 46300 50500 46300 10 line
50500 46600 300 270 450 10 darc
50850 46600 50 0 360 10 darc
grestore
gsave
49800 48100 50100 48100 10 line
49800 47700 50100 47700 10 line
49800 47300 50100 47300 10 line
50900 47700 51100 47700 10 line
50100 47400 50100 48000 10 line
50100 48000 50500 48000 10 line
50100 47400 50500 47400 10 line
50500 47700 300 270 450 10 darc
50850 47700 50 0 360 10 darc
50100 47400 50100 47200 10 line
50100 48200 50100 48000 10 line
grestore
51100 50100 51200 50100 10 line
51200 50100 51200 49800 10 line
51200 49800 49600 49400 10 line
49600 49300 49800 49300 10 line
49600 49300 49600 49400 10 line
51100 49100 51500 49100 10 line
51200 49100 51200 49400 10 line
51200 49400 49600 49800 10 line
49800 49900 49600 49900 10 line
49600 49900 49600 49800 10 line
51100 47700 51500 47700 10 line
51200 47700 51200 47300 10 line
51200 47300 49600 46900 10 line
51100 46600 51200 46600 10 line
51200 46100 51200 46900 10 line
51200 46900 49600 47200 10 line
49800 47300 49600 47300 10 line
49600 47300 49600 47200 10 line
49800 46800 49600 46800 10 line
49600 46800 49600 46900 10 line
51200 49100 51200 48700 10 line
51200 48700 49600 48500 10 line
49800 48100 49600 48100 10 line
49600 48100 49600 48500 10 line
49800 48900 49200 48900 10 line
49200 48900 49200 47700 10 line
49200 47700 49800 47700 10 line
49800 46400 48800 46400 10 line
gsave
false false false false 260.000000 [(D=1) ] 0 48600 46500 180.555557 text
grestore
49200 48300 48800 48300 10 line
gsave
false false false false 260.000000 [(C=0) ] 0 48600 48400 180.555557 text
grestore
51200 46100 49100 46100 10 line
49100 46100 49100 50300 10 line
49100 50300 49800 50300 10 line
gsave
false false false false 260.000000 [(1) ] 0 50300 50100 180.555557 text
grestore
gsave
false false false false 260.000000 [(2) ] 0 50300 49100 180.555557 text
grestore
gsave
false false false false 260.000000 [(3) ] 0 50300 47700 180.555557 text
grestore
gsave
false false false false 260.000000 [(4) ] 0 50300 46600 180.555557 text
grestore
gsave
53300 50300 53600 50300 10 line
53300 49900 53600 49900 10 line
54400 50100 54600 50100 10 line
53600 49800 53600 50400 10 line
53600 50400 54000 50400 10 line
53600 49800 54000 49800 10 line
54000 50100 300 270 450 10 darc
54350 50100 50 0 360 10 darc
grestore
gsave
53300 49300 53600 49300 10 line
53300 48900 53600 48900 10 line
54400 49100 54600 49100 10 line
53600 48800 53600 49400 10 line
53600 49400 54000 49400 10 line
53600 48800 54000 48800 10 line
54000 49100 300 270 450 10 darc
54350 49100 50 0 360 10 darc
grestore
gsave
53300 46800 53600 46800 10 line
53300 46400 53600 46400 10 line
54400 46600 54600 46600 10 line
53600 46300 53600 46900 10 line
53600 46900 54000 46900 10 line
53600 46300 54000 46300 10 line
54000 46600 300 270 450 10 darc
54350 46600 50 0 360 10 darc
grestore
gsave
53300 48100 53600 48100 10 line
53300 47700 53600 47700 10 line
53300 47300 53600 47300 10 line
54400 47700 54600 47700 10 line
53600 47400 53600 48000 10 line
53600 48000 54000 48000 10 line
53600 47400 54000 47400 10 line
54000 47700 300 270 450 10 darc
54350 47700 50 0 360 10 darc
53600 47400 53600 47200 10 line
53600 48200 53600 48000 10 line
grestore
54600 50100 54700 50100 10 line
54700 50100 54700 49800 10 line
54700 49800 53100 49400 10 line
53100 49300 53300 49300 10 line
53100 49300 53100 49400 10 line
54600 49100 55000 49100 10 line
54700 49100 54700 49400 10 line
54700 49400 53100 49800 10 line
53300 49900 53100 49900 10 line
53100 49900 53100 49800 10 line
54600 47700 55000 47700 10 line
54700 47700 54700 47300 10 line
54700 47300 53100 46900 10 line
54600 46600 54700 46600 10 line
54700 46100 54700 46900 10 line
54700 46900 53100 47200 10 line
53300 47300 53100 47300 10 line
53100 47300 53100 47200 10 line
53300 46800 53100 46800 10 line
53100 46800 53100 46900 10 line
54700 49100 54700 48700 10 line
54700 48700 53100 48500 10 line
53300 48100 53100 48100 10 line
53100 48100 53100 48500 10 line
53300 48900 52800 48900 10 line
52800 48900 52800 47700 10 line
52800 47700 53300 47700 10 line
53300 46400 52300 46400 10 line
gsave
false false false false 260.000000 [(D=1) ] 0 52100 46500 180.555557 text
grestore
52800 48300 52300 48300 10 line
gsave
false false false false 260.000000 [(C=1) ] 0 52100 48400 180.555557 text
grestore
54700 46100 52700 46100 10 line
52700 46100 52700 50300 10 line
52700 50300 53300 50300 10 line
gsave
false false false false 260.000000 [(1) ] 0 53800 50100 180.555557 text
grestore
gsave
false false false false 260.000000 [(2) ] 0 53800 49100 180.555557 text
grestore
gsave
false false false false 260.000000 [(3) ] 0 53800 47700 180.555557 text
grestore
gsave
false false false false 260.000000 [(4) ] 0 53800 46600 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 49450 48950 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 49450 47750 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 49450 46500 180.555557 text
grestore
48450 45900 55300 45900 10 line
55300 45900 55300 50600 10 line
55300 50600 48450 50600 10 line
48450 50600 48450 45900 10 line
gsave
false false false false 260.000000 [(0) ] 0 51050 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 51050 47750 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 51050 50150 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 49450 47350 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 49450 46850 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 51050 49150 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 49450 48150 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 49450 49950 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 49450 50350 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 49450 49350 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 52950 46450 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 54550 47750 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 52950 50350 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 54550 49150 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 54550 50150 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 52950 48150 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 52950 47750 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 52950 47350 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 54550 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 52950 49950 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 52950 49350 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 52950 48950 180.555557 text
grestore
gsave
false false false false 260.000000 [(Q1) ] 0 51300 50200 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Q1\\_) ] 0 51300 49200 180.555557 text
grestore
gsave
false false false false 260.000000 [(Q2) ] 0 51300 47800 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Q2\\_) ] 0 51300 46700 180.555557 text
grestore
gsave
false false false false 260.000000 [(Q1) ] 0 54800 50200 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Q1\\_) ] 0 54800 49200 180.555557 text
grestore
gsave
false false false false 260.000000 [(Q2) ] 0 54800 47800 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Q2\\_) ] 0 54800 46700 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_S1\\_) ] 0 49700 50350 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_R1\\_) ] 0 49700 48950 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Sa2\\_) ] 0 49700 48150 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Sb2\\_) ] 0 49700 47750 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_R2\\_) ] 0 49700 46450 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_S1\\_) ] 0 53200 50350 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_R1\\_) ] 0 53200 48950 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Sa2\\_) ] 0 53200 48150 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Sb2\\_) ] 0 53200 47750 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_R2\\_) ] 0 53200 46450 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 52950 46850 180.555557 text
grestore
60 60 51470 49070 fbox
newpath
51200 49100
25
0 360 arc
fill
newpath
51200 49100
25
0 360 arc
fill
newpath
51200 49100
25
0 360 arc
fill
newpath
51200 49100
25
0 360 arc
fill
60 60 51470 47670 fbox
newpath
51200 47700
25
0 360 arc
fill
newpath
51200 47700
25
0 360 arc
fill
newpath
51200 47700
25
0 360 arc
fill
newpath
51200 46600
25
0 360 arc
fill
newpath
51200 46600
25
0 360 arc
fill
newpath
51200 46600
25
0 360 arc
fill
newpath
51200 49100
25
0 360 arc
fill
newpath
51200 49100
25
0 360 arc
fill
newpath
49200 48300
25
0 360 arc
fill
60 60 48770 46370 fbox
newpath
49200 48300
25
0 360 arc
fill
60 60 48770 48270 fbox
newpath
49200 48300
25
0 360 arc
fill
60 60 54970 49070 fbox
newpath
54700 49100
25
0 360 arc
fill
newpath
54700 49100
25
0 360 arc
fill
newpath
54700 49100
25
0 360 arc
fill
newpath
54700 49100
25
0 360 arc
fill
60 60 54970 47670 fbox
newpath
54700 47700
25
0 360 arc
fill
newpath
54700 47700
25
0 360 arc
fill
newpath
54700 47700
25
0 360 arc
fill
newpath
54700 46600
25
0 360 arc
fill
newpath
54700 46600
25
0 360 arc
fill
newpath
54700 46600
25
0 360 arc
fill
newpath
54700 49100
25
0 360 arc
fill
newpath
54700 49100
25
0 360 arc
fill
newpath
52800 48300
25
0 360 arc
fill
60 60 52270 46370 fbox
newpath
52800 48300
25
0 360 arc
fill
60 60 52270 48270 fbox
newpath
52800 48300
25
0 360 arc
fill
showpage
%%End
