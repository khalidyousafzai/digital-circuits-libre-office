%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Wed Jul 25 10:59:39 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figDflipflopWithPresetClear.sch
%%Author: (null)
%%BoundingBox: 0 0 561 302
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-38500 -48600 translate
gsave
43000 51700 43300 51700 10 line
43000 51300 43300 51300 10 line
44100 51500 44300 51500 10 line
43300 51200 43300 51800 10 line
43300 51800 43700 51800 10 line
43300 51200 43700 51200 10 line
43700 51500 300 270 450 10 darc
44050 51500 50 0 360 10 darc
grestore
gsave
43000 50100 43300 50100 10 line
43000 49700 43300 49700 10 line
44100 49900 44300 49900 10 line
43300 49600 43300 50200 10 line
43300 50200 43700 50200 10 line
43300 49600 43700 49600 10 line
43700 49900 300 270 450 10 darc
44050 49900 50 0 360 10 darc
grestore
45900 51500 45600 51500 10 line
45900 49900 45600 49900 10 line
45700 49900 45700 50400 10 line
45700 51500 45700 51000 10 line
45700 51000 44200 50400 10 line
45700 50400 44200 51000 10 line
44300 51100 44200 51100 10 line
44200 51100 44200 51000 10 line
44300 50300 44200 50300 10 line
44200 50300 44200 50400 10 line
gsave
39900 51900 40200 51900 10 line
39900 51500 40200 51500 10 line
41000 51700 41200 51700 10 line
40200 51400 40200 52000 10 line
40200 52000 40600 52000 10 line
40200 51400 40600 51400 10 line
40600 51700 300 270 450 10 darc
40950 51700 50 0 360 10 darc
grestore
gsave
39900 49900 40200 49900 10 line
39900 49500 40200 49500 10 line
41000 49700 41200 49700 10 line
40200 49400 40200 50000 10 line
40200 50000 40600 50000 10 line
40200 49400 40600 49400 10 line
40600 49700 300 270 450 10 darc
40950 49700 50 0 360 10 darc
grestore
42500 51700 43000 51700 10 line
42500 49700 43000 49700 10 line
42600 49700 42600 50200 10 line
42600 51200 42600 51700 10 line
42600 51200 41100 50200 10 line
42600 50200 41100 51200 10 line
41200 51300 41100 51300 10 line
41100 51300 41100 51200 10 line
41100 50200 41100 50100 10 line
gsave
40300 51000 40800 50700 10 line
40800 50700 40300 50400 10 line
40300 51000 40300 50700 10 line
40300 50700 40300 50400 10 line
40850 50700 50 0 360 10 darc
40300 50700 40000 50700 10 line
41100 50700 40900 50700 10 line
grestore
43000 51300 42800 51300 10 line
42800 51300 42800 50100 10 line
42800 50100 43000 50100 10 line
41100 50700 42800 50700 10 line
39900 51500 39800 51500 10 line
39800 51500 39800 49900 10 line
39800 49900 39900 49900 10 line
40000 50700 39800 50700 10 line
39800 50700 38800 50700 10 line
39300 49500 39900 49500 10 line
38800 51900 39900 51900 10 line
gsave
false false false false 260.000000 [(D) ] 0 38600 51900 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 38600 50700 180.555557 text
grestore
gsave
false false false false 260.000000 [(Q) ] 0 46000 51500 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Q\\_) ] 0 46000 49900 180.555557 text
grestore
38500 48600 46300 48600 10 line
46300 48600 46300 52800 10 line
46300 52800 38500 52800 10 line
38500 52800 38500 48600 10 line
gsave
39600 51600 39300 51100 10 line
39300 51100 39000 51600 10 line
39600 51600 39300 51600 10 line
39300 51600 39000 51600 10 line
39300 51050 50 0 360 10 darc
39300 51600 39300 51900 10 line
39300 50800 39300 51000 10 line
newpath
39300 51900
25
0 360 arc
fill
newpath
39300 51900
25
0 360 arc
fill
grestore
39300 50800 39300 49500 10 line
gsave
41200 52100 41500 52100 10 line
41200 51700 41500 51700 10 line
41200 51300 41500 51300 10 line
42300 51700 42500 51700 10 line
41500 51400 41500 52000 10 line
41500 52000 41900 52000 10 line
41500 51400 41900 51400 10 line
41900 51700 300 270 450 10 darc
42250 51700 50 0 360 10 darc
41500 51400 41500 51200 10 line
41500 52200 41500 52000 10 line
grestore
gsave
41200 50100 41500 50100 10 line
41200 49700 41500 49700 10 line
41200 49300 41500 49300 10 line
42300 49700 42500 49700 10 line
41500 49400 41500 50000 10 line
41500 50000 41900 50000 10 line
41500 49400 41900 49400 10 line
41900 49700 300 270 450 10 darc
42250 49700 50 0 360 10 darc
41500 49400 41500 49200 10 line
41500 50200 41500 50000 10 line
grestore
gsave
44300 50300 44600 50300 10 line
44300 49900 44600 49900 10 line
44300 49500 44600 49500 10 line
45400 49900 45600 49900 10 line
44600 49600 44600 50200 10 line
44600 50200 45000 50200 10 line
44600 49600 45000 49600 10 line
45000 49900 300 270 450 10 darc
45350 49900 50 0 360 10 darc
44600 49600 44600 49400 10 line
44600 50400 44600 50200 10 line
grestore
gsave
44300 51900 44600 51900 10 line
44300 51500 44600 51500 10 line
44300 51100 44600 51100 10 line
45400 51500 45600 51500 10 line
44600 51200 44600 51800 10 line
44600 51800 45000 51800 10 line
44600 51200 45000 51200 10 line
45000 51500 300 270 450 10 darc
45350 51500 50 0 360 10 darc
44600 51200 44600 51000 10 line
44600 52000 44600 51800 10 line
grestore
41200 50100 41100 50100 10 line
44100 51900 44300 51900 10 line
44100 51900 44100 52400 10 line
44100 52400 40600 52400 10 line
41200 52100 41100 52100 10 line
41100 52100 41100 52400 10 line
44100 49500 44300 49500 10 line
44100 49500 44100 49000 10 line
44100 49000 40600 49000 10 line
41200 49300 41100 49300 10 line
41100 49300 41100 49000 10 line
60 60 45870 51470 fbox
newpath
45700 51500
25
0 360 arc
fill
60 60 45870 49870 fbox
newpath
45700 49900
25
0 360 arc
fill
newpath
45700 49900
25
0 360 arc
fill
newpath
45700 49900
25
0 360 arc
fill
newpath
45700 51500
25
0 360 arc
fill
newpath
45700 51500
25
0 360 arc
fill
newpath
42600 51700
25
0 360 arc
fill
newpath
42600 49700
25
0 360 arc
fill
newpath
42600 49700
25
0 360 arc
fill
newpath
42600 49700
25
0 360 arc
fill
newpath
42600 51700
25
0 360 arc
fill
newpath
42600 51700
25
0 360 arc
fill
newpath
42800 50700
25
0 360 arc
fill
newpath
42800 50700
25
0 360 arc
fill
newpath
42800 50700
25
0 360 arc
fill
newpath
39800 50700
25
0 360 arc
fill
newpath
39800 50700
25
0 360 arc
fill
newpath
39800 50700
25
0 360 arc
fill
newpath
39800 50700
25
0 360 arc
fill
newpath
39800 50700
25
0 360 arc
fill
60 60 38770 50670 fbox
newpath
39800 50700
25
0 360 arc
fill
60 60 38770 51870 fbox
newpath
39300 51900
25
0 360 arc
fill
newpath
39300 51900
25
0 360 arc
fill
newpath
39300 51900
25
0 360 arc
fill
60 60 40570 52370 fbox
newpath
41100 52400
25
0 360 arc
fill
newpath
41100 52400
25
0 360 arc
fill
newpath
41100 52400
25
0 360 arc
fill
60 60 40570 48970 fbox
newpath
41100 49000
25
0 360 arc
fill
newpath
41100 49000
25
0 360 arc
fill
newpath
41100 49000
25
0 360 arc
fill
showpage
%%End
