%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Wed Jul 25 10:07:25 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figRippleCounter.sch
%%Author: (null)
%%BoundingBox: 0 0 439 324
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-43000 -45600 translate
gsave
43800 48700 44400 48700 10 line
44400 48700 44400 49700 10 line
44400 49700 43800 49700 10 line
43800 49700 43800 48700 10 line
43500 49500 43800 49500 10 line
gsave
false false false false 260.000000 [(D) ] 0 43855 49495 180.555557 text
grestore
43500 49200 43800 49200 10 line
gsave
false false false false 260.000000 [(C) ] 0 43955 49145 180.555557 text
grestore
44700 49500 44400 49500 10 line
gsave
false true false false 260.000000 [(Q) ] 0 44345 49495 180.555557 text
grestore
44700 48900 44400 48900 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 44345 48895 180.555557 text
grestore
43800 49300 43900 49200 10 line
43900 49200 43800 49100 10 line
grestore
gsave
45600 48700 46200 48700 10 line
46200 48700 46200 49700 10 line
46200 49700 45600 49700 10 line
45600 49700 45600 48700 10 line
45300 49500 45600 49500 10 line
gsave
false false false false 260.000000 [(D) ] 0 45655 49495 180.555557 text
grestore
45300 49200 45600 49200 10 line
gsave
false false false false 260.000000 [(C) ] 0 45755 49145 180.555557 text
grestore
46500 49500 46200 49500 10 line
gsave
false true false false 260.000000 [(Q) ] 0 46145 49495 180.555557 text
grestore
46500 48900 46200 48900 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 46145 48895 180.555557 text
grestore
45600 49300 45700 49200 10 line
45700 49200 45600 49100 10 line
grestore
gsave
47700 48700 48300 48700 10 line
48300 48700 48300 49700 10 line
48300 49700 47700 49700 10 line
47700 49700 47700 48700 10 line
47400 49500 47700 49500 10 line
gsave
false false false false 260.000000 [(D) ] 0 47755 49495 180.555557 text
grestore
47400 49200 47700 49200 10 line
gsave
false false false false 260.000000 [(C) ] 0 47855 49145 180.555557 text
grestore
48600 49500 48300 49500 10 line
gsave
false true false false 260.000000 [(Q) ] 0 48245 49495 180.555557 text
grestore
48600 48900 48300 48900 10 line
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 48245 48895 180.555557 text
grestore
47700 49300 47800 49200 10 line
47800 49200 47700 49100 10 line
grestore
44700 48900 45100 48900 10 line
45100 48900 45100 50000 10 line
43400 50000 45100 50000 10 line
43400 49500 43400 50000 10 line
43400 49500 43500 49500 10 line
45300 49200 45100 49200 10 line
46500 48900 46900 48900 10 line
46900 48900 46900 50000 10 line
46900 50000 45200 50000 10 line
45200 50000 45200 49500 10 line
45200 49500 45300 49500 10 line
47400 49200 46900 49200 10 line
48600 48900 49000 48900 10 line
49000 48900 49000 50000 10 line
49000 50000 47300 50000 10 line
47300 49500 47300 50000 10 line
47300 49500 47400 49500 10 line
48800 49500 48600 49500 10 line
gsave
false false false false 260.000000 [(Q2) ] 0 48600 49600 180.555557 text
grestore
46700 49500 46500 49500 10 line
gsave
false false false false 260.000000 [(Q1) ] 0 46500 49600 180.555557 text
grestore
44900 49500 44700 49500 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 44700 49600 180.555557 text
grestore
43300 49200 43500 49200 10 line
gsave
false false false false 260.000000 [(C) ] 0 43100 49200 180.555557 text
grestore
43400 47700 43700 47700 10 line
43700 47700 43700 47500 10 line
43700 47500 43900 47500 10 line
43900 47500 43900 47700 10 line
43900 47700 44200 47700 10 line
44200 47700 44200 47500 10 line
44200 47500 44400 47500 10 line
44400 47500 44400 47700 10 line
44400 47700 44700 47700 10 line
44700 47700 44700 47500 10 line
44700 47500 44900 47500 10 line
44900 47500 44900 47700 10 line
43850 47600 43900 47650 10 line
43950 47600 43900 47650 10 line
44350 47600 44400 47650 10 line
44450 47600 44400 47650 10 line
44850 47600 44900 47650 10 line
44950 47600 44900 47650 10 line
44900 47700 45200 47700 10 line
45200 47700 45200 47500 10 line
45200 47500 45400 47500 10 line
45400 47500 45400 47700 10 line
45400 47700 45700 47700 10 line
45700 47700 45700 47500 10 line
45700 47500 45900 47500 10 line
45900 47500 45900 47700 10 line
45900 47700 46200 47700 10 line
46200 47700 46200 47500 10 line
46200 47500 46400 47500 10 line
46400 47500 46400 47700 10 line
45350 47600 45400 47650 10 line
45450 47600 45400 47650 10 line
45850 47600 45900 47650 10 line
45950 47600 45900 47650 10 line
46350 47600 46400 47650 10 line
46450 47600 46400 47650 10 line
46400 47700 46700 47700 10 line
46700 47700 46700 47500 10 line
46700 47500 46900 47500 10 line
46900 47500 46900 47700 10 line
46900 47700 47200 47700 10 line
47200 47700 47200 47500 10 line
47200 47500 47400 47500 10 line
47400 47500 47400 47700 10 line
47400 47700 47700 47700 10 line
47700 47700 47700 47500 10 line
47700 47500 47900 47500 10 line
47900 47500 47900 47700 10 line
46850 47600 46900 47650 10 line
46950 47600 46900 47650 10 line
47350 47600 47400 47650 10 line
47450 47600 47400 47650 10 line
47850 47600 47900 47650 10 line
47950 47600 47900 47650 10 line
47900 47700 48200 47700 10 line
48200 47700 48200 47500 10 line
48200 47500 48400 47500 10 line
48400 47500 48400 47700 10 line
48400 47700 48700 47700 10 line
48700 47700 48700 47500 10 line
48700 47500 48900 47500 10 line
48350 47600 48400 47650 10 line
48450 47600 48400 47650 10 line
43400 47200 43900 47200 10 line
43900 47200 43900 47400 10 line
43900 47400 44400 47400 10 line
44400 47400 44400 47200 10 line
44400 47200 44900 47200 10 line
44900 47200 44900 47400 10 line
44900 47400 45400 47400 10 line
45400 47400 45400 47200 10 line
45400 47200 45900 47200 10 line
45900 47200 45900 47400 10 line
45900 47400 46400 47400 10 line
46400 47400 46400 47200 10 line
46400 47200 46900 47200 10 line
46900 47200 46900 47400 10 line
46900 47400 47400 47400 10 line
47400 47400 47400 47200 10 line
47400 47200 47900 47200 10 line
47900 47200 47900 47400 10 line
47900 47400 48400 47400 10 line
48400 47400 48400 47200 10 line
48400 47200 48900 47200 10 line
48900 47100 48400 47100 10 line
48400 47100 48400 46900 10 line
48400 46900 47900 46900 10 line
47900 46900 47900 47100 10 line
47900 47100 47400 47100 10 line
47400 47100 47400 46900 10 line
47400 46900 46900 46900 10 line
46900 46900 46900 47100 10 line
46900 47100 46400 47100 10 line
46400 47100 46400 46900 10 line
46400 46900 45900 46900 10 line
45900 46900 45900 47100 10 line
45900 47100 45400 47100 10 line
45400 47100 45400 46900 10 line
45400 46900 44900 46900 10 line
44900 46900 44900 47100 10 line
44900 47100 44400 47100 10 line
44400 47100 44400 46900 10 line
44400 46900 43900 46900 10 line
43900 46900 43900 47100 10 line
43900 47100 43400 47100 10 line
gsave
false false false false 208.000000 [(C) ] 0 43200 47500 144.444443 text
grestore
gsave
false false false false 208.000000 [(Q0) ] 0 43200 47250 144.444443 text
grestore
gsave
false false false false 208.000000 [(\\_Q0\\_) ] 0 43200 46900 144.444443 text
grestore
44350 47000 44400 47050 10 line
44450 47000 44400 47050 10 line
45350 47000 45400 47050 10 line
45450 47000 45400 47050 10 line
46350 47000 46400 47050 10 line
46450 47000 46400 47050 10 line
47350 47000 47400 47050 10 line
47450 47000 47400 47050 10 line
48350 47000 48400 47050 10 line
48450 47000 48400 47050 10 line
43400 46600 44400 46600 10 line
44400 46600 44400 46800 10 line
44400 46800 45400 46800 10 line
45400 46800 45400 46600 10 line
45400 46600 46400 46600 10 line
46400 46600 46400 46800 10 line
46400 46800 47400 46800 10 line
47400 46800 47400 46600 10 line
47400 46600 48400 46600 10 line
48400 46600 48400 46800 10 line
48400 46800 48900 46800 10 line
43400 46500 44400 46500 10 line
44400 46500 44400 46300 10 line
44400 46300 45400 46300 10 line
45400 46300 45400 46500 10 line
45400 46500 46400 46500 10 line
46400 46500 46400 46300 10 line
46400 46300 47400 46300 10 line
47400 46300 47400 46500 10 line
47400 46500 48400 46500 10 line
48400 46500 48400 46300 10 line
48400 46300 48900 46300 10 line
45350 46400 45400 46450 10 line
45450 46400 45400 46450 10 line
47350 46400 47400 46450 10 line
47450 46400 47400 46450 10 line
43400 46000 45400 46000 10 line
45400 46000 45400 46200 10 line
45400 46200 47400 46200 10 line
47400 46200 47400 46000 10 line
47400 46000 48900 46000 10 line
43400 45900 45400 45900 10 line
45400 45900 45400 45700 10 line
45400 45700 47400 45700 10 line
47400 45700 47400 45900 10 line
47400 45900 48900 45900 10 line
47350 45800 47400 45850 10 line
47450 45800 47400 45850 10 line
gsave
false false false false 208.000000 [(Q1) ] 0 43200 46650 144.444443 text
grestore
gsave
false false false false 208.000000 [(\\_Q1\\_) ] 0 43200 46300 144.444443 text
grestore
gsave
false false false false 208.000000 [(\\_Q2\\_) ] 0 43200 45700 144.444443 text
grestore
gsave
false false false false 208.000000 [(Q2) ] 0 43200 46050 144.444443 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 43600 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 44600 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 45600 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 46600 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 47600 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 48600 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 43600 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 44100 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 45100 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 46100 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 47100 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 48100 47250 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 44100 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 45600 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 46100 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 47600 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 48100 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 44600 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 45100 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 46600 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 47100 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 48600 46650 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 43600 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 44100 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 44600 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 45100 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 47600 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 48100 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 0 48600 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 45600 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 46100 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 46600 46050 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 47100 46050 180.555557 text
grestore
43000 45600 49100 45600 10 line
49100 45600 49100 50100 10 line
49100 50100 43000 50100 10 line
43000 50100 43000 45600 10 line
newpath
45100 49200
25
0 360 arc
fill
newpath
45100 49200
25
0 360 arc
fill
newpath
45100 49200
25
0 360 arc
fill
newpath
46900 49200
25
0 360 arc
fill
newpath
46900 49200
25
0 360 arc
fill
newpath
46900 49200
25
0 360 arc
fill
60 60 48770 49470 fbox
60 60 46670 49470 fbox
60 60 44870 49470 fbox
60 60 43270 49170 fbox
showpage
%%End
