%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Wed Jul 25 15:32:35 2012
%%Title: /home/khalid/Desktop/digitalLogicDesign/gschemFigures/figSynchronousCircuitA.sch
%%Author: (null)
%%BoundingBox: 0 0 446 345
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-45200 -46200 translate
gsave
49800 49100 50400 49100 10 line
50400 49100 50400 50100 10 line
50400 50100 49800 50100 10 line
49800 50100 49800 49100 10 line
49500 49900 49800 49900 10 line
49500 49600 49800 49600 10 line
50700 49900 50400 49900 10 line
50700 49300 50400 49300 10 line
49800 49700 49900 49600 10 line
49900 49600 49800 49500 10 line
gsave
false false false false 260.000000 [(D) ] 0 49855 49895 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 49955 49545 180.555557 text
grestore
gsave
false true false false 260.000000 [(Q) ] 0 50345 49895 180.555557 text
grestore
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 50345 49295 180.555557 text
grestore
grestore
gsave
49800 47600 50400 47600 10 line
50400 47600 50400 48600 10 line
50400 48600 49800 48600 10 line
49800 48600 49800 47600 10 line
49500 48400 49800 48400 10 line
49500 48100 49800 48100 10 line
50700 48400 50400 48400 10 line
50700 47800 50400 47800 10 line
49800 48200 49900 48100 10 line
49900 48100 49800 48000 10 line
gsave
false false false false 260.000000 [(D) ] 0 49855 48395 180.555557 text
grestore
gsave
false false false false 260.000000 [(C) ] 0 49955 48045 180.555557 text
grestore
gsave
false true false false 260.000000 [(Q) ] 0 50345 48395 180.555557 text
grestore
gsave
false true false false 260.000000 [(\\_Q\\_) ] 0 50345 47795 180.555557 text
grestore
grestore
gsave
48025 49600 48400 49600 10 line
48025 50200 48400 50200 10 line
47750 49900 400 312 408 10 darc
48400 50000 400 270 346 10 darc
48400 49800 400 14 90 10 darc
48100 50100 47800 50100 10 line
48100 49700 47800 49700 10 line
48838 49900 50 0 360 10 darc
49100 49900 48888 49900 10 line
grestore
gsave
46100 50500 46400 50500 10 line
46100 50100 46400 50100 10 line
47100 50300 47400 50300 10 line
46400 50000 46400 50600 10 line
46400 50600 46800 50600 10 line
46400 50000 46800 50000 10 line
46800 50300 300 270 450 10 darc
grestore
gsave
46100 49700 46400 49700 10 line
46100 49300 46400 49300 10 line
47100 49500 47400 49500 10 line
46400 49200 46400 49800 10 line
46400 49800 46800 49800 10 line
46400 49200 46800 49200 10 line
46800 49500 300 270 450 10 darc
grestore
gsave
47700 48600 48000 48600 10 line
47700 48200 48000 48200 10 line
48800 48400 49000 48400 10 line
48000 48100 48000 48700 10 line
48000 48700 48400 48700 10 line
48000 48100 48400 48100 10 line
48400 48400 300 270 450 10 darc
48750 48400 50 0 360 10 darc
grestore
gsave
50438 46800 50 0 360 10 darc
50700 46800 50488 46800 10 line
49400 46800 49700 46800 10 line
49436 46800 400 312 409 10 darc
49700 46500 50000 46500 10 line
49700 47100 50000 47100 10 line
50000 46900 400 270 346 10 darc
50000 46700 400 14 90 10 darc
49700 46300 49700 46500 10 line
49700 47300 49700 47100 10 line
49400 47200 49700 47200 10 line
49400 46400 49700 46400 10 line
grestore
51000 49900 50700 49900 10 line
49500 49900 49100 49900 10 line
49500 49600 49300 49600 10 line
49300 47800 49300 49600 10 line
49300 48100 49500 48100 10 line
49300 47800 48900 47800 10 line
49500 48400 49000 48400 10 line
50800 49900 50800 50700 10 line
46000 50700 50800 50700 10 line
46000 50700 46000 50500 10 line
46000 50500 46100 50500 10 line
50700 47800 51000 47800 10 line
50800 47400 50800 47800 10 line
50800 47400 46000 47400 10 line
46000 47400 46000 49300 10 line
46000 49300 46100 49300 10 line
gsave
false false false false 260.000000 [(C) ] 0 48700 47800 180.555557 text
grestore
51000 48400 50700 48400 10 line
51000 49300 50700 49300 10 line
45800 50100 46100 50100 10 line
45800 46400 45800 50100 10 line
45800 49700 46100 49700 10 line
47800 50100 47600 50100 10 line
47600 50100 47600 50300 10 line
47600 50300 47400 50300 10 line
47800 49700 47600 49700 10 line
47600 49700 47600 49500 10 line
47600 49500 47400 49500 10 line
50800 48400 50800 48800 10 line
50800 48800 47500 48800 10 line
47500 48600 47500 48800 10 line
47500 48600 47700 48600 10 line
50800 49300 50800 48900 10 line
50800 48900 47300 48900 10 line
47300 46800 47300 48900 10 line
47300 48200 47700 48200 10 line
gsave
false false false false 260.000000 [(Q0) ] 0 51100 49900 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Q0\\_) ] 0 51100 49300 180.555557 text
grestore
gsave
false false false false 260.000000 [(Q1) ] 0 51100 48400 180.555557 text
grestore
gsave
false false false false 260.000000 [(\\_Q1\\_) ] 0 51100 47800 180.555557 text
grestore
49400 47200 49000 47200 10 line
49000 47200 49000 47400 10 line
49400 46800 47300 46800 10 line
45800 46400 49400 46400 10 line
51000 46800 50700 46800 10 line
gsave
false false false false 260.000000 [(y) ] 0 51100 46800 180.555557 text
grestore
45500 49700 45800 49700 10 line
gsave
false false false false 260.000000 [(x) ] 0 45300 49700 180.555557 text
grestore
45200 46200 51400 46200 10 line
51400 46200 51400 51000 10 line
51400 51000 45200 51000 10 line
45200 51000 45200 46200 10 line
60 60 50970 49870 fbox
newpath
50800 49900
25
0 360 arc
fill
newpath
49300 48100
25
0 360 arc
fill
newpath
49300 48100
25
0 360 arc
fill
newpath
49300 48100
25
0 360 arc
fill
60 60 48870 47770 fbox
newpath
50800 49900
25
0 360 arc
fill
newpath
50800 49900
25
0 360 arc
fill
60 60 50970 47770 fbox
newpath
50800 47800
25
0 360 arc
fill
newpath
50800 47800
25
0 360 arc
fill
newpath
50800 47800
25
0 360 arc
fill
newpath
49000 47400
25
0 360 arc
fill
60 60 50970 48370 fbox
newpath
50800 48400
25
0 360 arc
fill
60 60 50970 49270 fbox
newpath
50800 49300
25
0 360 arc
fill
newpath
45800 49700
25
0 360 arc
fill
newpath
45800 49700
25
0 360 arc
fill
newpath
45800 49700
25
0 360 arc
fill
newpath
45800 49700
25
0 360 arc
fill
newpath
50800 48400
25
0 360 arc
fill
newpath
50800 48400
25
0 360 arc
fill
newpath
50800 49300
25
0 360 arc
fill
newpath
50800 49300
25
0 360 arc
fill
newpath
47300 48200
25
0 360 arc
fill
newpath
47300 48200
25
0 360 arc
fill
newpath
47300 48200
25
0 360 arc
fill
newpath
49000 47400
25
0 360 arc
fill
newpath
49000 47400
25
0 360 arc
fill
60 60 50970 46770 fbox
60 60 45470 49670 fbox
newpath
45800 49700
25
0 360 arc
fill
newpath
45800 49700
25
0 360 arc
fill
showpage
%%End
